import{_ as e,c as t,o as i,ag as r}from"./chunks/framework.B-XtCDNB.js";const u=JSON.parse('{"title":"About Vala","description":"","frontmatter":{},"headers":[],"relativePath":"about.md","filePath":"about.md","lastUpdated":1759534595000}'),l={name:"about.md"};function s(o,a,n,d,c,h){return i(),t("div",null,[...a[0]||(a[0]=[r('<h1 id="about-vala" tabindex="-1">About Vala <a class="header-anchor" href="#about-vala" aria-label="Permalink to &quot;About Vala&quot;">​</a></h1><p><strong>valac</strong>, the Vala compiler, is a self-hosting compiler that translates Vala source code into C source and header files. It uses the GObject type system to create classes and interfaces declared in the Vala source code.</p><p><a href="https://wiki.gnome.org/Projects/Vala/Syntax" target="_blank" rel="noreferrer">The syntax of Vala</a> is similar to C#, modified to better fit the GObject type system. Vala supports modern language features as the following:</p><ul><li>Interfaces</li><li>Properties</li><li>Signals</li><li>Foreach</li><li>Lambda expressions</li><li>Type inference for local variables</li><li>Generics</li><li>Non-null types</li><li>Assisted memory management</li><li>Exception handling</li><li>Type modules (Plugins)</li></ul><p>Vala is designed to allow access to existing C libraries, especially GObject-based libraries, without the need for runtime bindings. All that is needed to use a library with Vala is an API file, containing the class and method declarations in Vala syntax. Vala currently comes with bindings for GLib and GTK+ and many others from the GNOME Platform.</p><p>Using classes and methods written in Vala from an application written in C is not difficult. The Vala library only has to install the generated header files and C applications may then access the GObject-based API of the Vala library as usual. It should also be easily possible to write a bindings generator for access to Vala libraries from applications written in e.g. C# as the Vala parser is written as a library, so that all compile-time information is available when generating a binding.</p><h2 id="why-vala" tabindex="-1">Why Vala? <a class="header-anchor" href="#why-vala" aria-label="Permalink to &quot;Why Vala?&quot;">​</a></h2><p>Many developers want to write GNOME applications and libraries in high-level programming languages but can&#39;t or don&#39;t want to use C# or Java for various reasons, so they are stuck with C without syntax support for the GObject type system. The Vala compiler allows developers to write complex object-oriented code rapidly while maintaining a standard C API and ABI and keeping the memory requirements low.</p><p>C# and Java libraries can&#39;t be used the same way as native GObject libraries from C and other languages and can&#39;t be accepted as part of the GNOME Platform. Managed applications also suffer from usually higher memory requirements which is not acceptable in some situations.</p><p>valac produces C source and header files from Vala source files as if you&#39;ve written your library or application directly in C. Using a Vala library from a C application won&#39;t look different than using any other GObject-based library. There won&#39;t be a vala runtime library and applications can distribute the generated C code with their tarballs, so there are no additional run or build-time dependencies for users.</p>',10)])])}const m=e(l,[["render",s]]);export{u as __pageData,m as default};
