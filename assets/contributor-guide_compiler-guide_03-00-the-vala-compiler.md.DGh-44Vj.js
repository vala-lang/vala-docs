import{_ as e,c as l,o,ag as r}from"./chunks/framework.B-XtCDNB.js";const p=JSON.parse('{"title":"3. The Vala Compiler","description":"","frontmatter":{},"headers":[],"relativePath":"contributor-guide/compiler-guide/03-00-the-vala-compiler.md","filePath":"contributor-guide/compiler-guide/03-00-the-vala-compiler.md","lastUpdated":1759534595000}'),t={name:"contributor-guide/compiler-guide/03-00-the-vala-compiler.md"};function i(n,a,h,c,m,d){return o(),l("div",null,[...a[0]||(a[0]=[r('<h1 id="_3-the-vala-compiler" tabindex="-1">3. The Vala Compiler <a class="header-anchor" href="#_3-the-vala-compiler" aria-label="Permalink to &quot;3. The Vala Compiler&quot;">​</a></h1><p>I suppose the best place to start is valac, the tool which Vala programmers know the best.</p><h4 id="_3-1-vala-in-a-nutshell" tabindex="-1"><a href="./03-00-the-vala-compiler/03-01-vala-in-a-nutshell.html">3.1. Vala in a Nutshell</a> <a class="header-anchor" href="#_3-1-vala-in-a-nutshell" aria-label="Permalink to &quot;[3.1. Vala in a Nutshell](03-00-the-vala-compiler/03-01-vala-in-a-nutshell.md)&quot;">​</a></h4><h4 id="_3-2-parser" tabindex="-1"><a href="./03-00-the-vala-compiler/03-02-parser.html">3.2. Parser</a> <a class="header-anchor" href="#_3-2-parser" aria-label="Permalink to &quot;[3.2. Parser](03-00-the-vala-compiler/03-02-parser.md)&quot;">​</a></h4><h4 id="_3-3-semantic-analyzer" tabindex="-1"><a href="./03-00-the-vala-compiler/03-03-semantic-analyzer.html">3.3. Semantic Analyzer</a> <a class="header-anchor" href="#_3-3-semantic-analyzer" aria-label="Permalink to &quot;[3.3. Semantic Analyzer](03-00-the-vala-compiler/03-03-semantic-analyzer.md)&quot;">​</a></h4><h4 id="_3-4-symbol-resolution" tabindex="-1"><a href="./03-00-the-vala-compiler/03-04-symbol-resolution.html">3.4. Symbol Resolution</a> <a class="header-anchor" href="#_3-4-symbol-resolution" aria-label="Permalink to &quot;[3.4. Symbol Resolution](03-00-the-vala-compiler/03-04-symbol-resolution.md)&quot;">​</a></h4><h4 id="_3-5-flow-analyzer" tabindex="-1"><a href="./03-00-the-vala-compiler/03-05-flow-analyzer.html">3.5. Flow Analyzer</a> <a class="header-anchor" href="#_3-5-flow-analyzer" aria-label="Permalink to &quot;[3.5. Flow Analyzer](03-00-the-vala-compiler/03-05-flow-analyzer.md)&quot;">​</a></h4><h4 id="_3-6-c-code-generation" tabindex="-1"><a href="./03-00-the-vala-compiler/03-06-c-code-generation.html">3.6. C Code Generation</a> <a class="header-anchor" href="#_3-6-c-code-generation" aria-label="Permalink to &quot;[3.6. C Code Generation](03-00-the-vala-compiler/03-06-c-code-generation.md)&quot;">​</a></h4><h4 id="_3-7-c-code-compilation-and-linking" tabindex="-1"><a href="./03-00-the-vala-compiler/03-07-c-code-compilation-and-linking.html">3.7. C Code Compilation and Linking</a> <a class="header-anchor" href="#_3-7-c-code-compilation-and-linking" aria-label="Permalink to &quot;[3.7. C Code Compilation and Linking](03-00-the-vala-compiler/03-07-c-code-compilation-and-linking.md)&quot;">​</a></h4>',9)])])}const u=e(t,[["render",i]]);export{p as __pageData,u as default};
