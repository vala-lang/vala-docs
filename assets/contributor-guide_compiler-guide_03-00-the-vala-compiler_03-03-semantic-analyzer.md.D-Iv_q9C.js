import{_ as l,c as t,o as a,ag as i}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"3.3. Semantic Analyzer","description":"","frontmatter":{},"headers":[],"relativePath":"contributor-guide/compiler-guide/03-00-the-vala-compiler/03-03-semantic-analyzer.md","filePath":"contributor-guide/compiler-guide/03-00-the-vala-compiler/03-03-semantic-analyzer.md","lastUpdated":1761243551000}'),o={name:"contributor-guide/compiler-guide/03-00-the-vala-compiler/03-03-semantic-analyzer.md"};function r(s,e,n,p,u,c){return a(),t("div",null,[...e[0]||(e[0]=[i('<h1 id="_3-3-semantic-analyzer" tabindex="-1">3.3. Semantic Analyzer <a class="header-anchor" href="#_3-3-semantic-analyzer" aria-label="Permalink to &quot;3.3. Semantic Analyzer&quot;">​</a></h1><h2 id="_3-3-1-attribute-processing" tabindex="-1">3.3.1. Attribute Processing <a class="header-anchor" href="#_3-3-1-attribute-processing" aria-label="Permalink to &quot;3.3.1. Attribute Processing&quot;">​</a></h2><p>Vala.Attributes are code tree nodes and have a name and a possibly empty list of key-value arguments. Some types of code tree nodes have as children a list of Attributes. The attribute processor&#39;s purpose is to interpret the attributes which were parsed into the code tree.</p><p>Later in the compilation, the results of attribute processing will be used, for example the CCode cname attribute affects what function names are used in emitted C code.</p><p>All attributes except for Conditional are handled from Vala.AttributeProcessor. I don&#39;t know where and how conditional is handled, but there is a function ignore_node() in Vala.CodeContext.</p><p>Vala.AttributeProcessor is a CodeVisitor which simply calls the process_attributes() method on every namespace, class, struct, interface, enum, method, constructor, parameter, property, delegate, constant, field, and signal that it visits.</p><p>Inside the process_attributes() method of each of these objects, a series of string comparisons will be made to parse the attributes. If the attribute is called &quot;CCode&quot;, then the process_ccode_attributes() function will be called to parse the key-value pairs supplied.</p><div class="info custom-block"><p class="custom-block-title">TODO</p><p>Mention Vala.Parser.set_attributes()</p><p>Feel free to help: <a href="https://github.com/vala-lang/vala-docs" target="_blank" rel="noreferrer">Vala Docs Repository</a>.</p></div><p>Attributes Recognized by Vala</p><p>All Vala.Symbol (class, constant, delegate, enum, enum value, errordomain, field, interface, method, property, signal, struct):</p><ul><li>Deprecated <ul><li>since</li></ul></li></ul><p>Vala.Namespace</p><ul><li>CCode</li></ul><p>Vala.Class</p><ul><li>CCode</li><li>DBus</li><li>Compact</li><li>Immutable</li><li>ErrorBase</li></ul><p>Vala.Struct</p><ul><li>CCode</li><li>SimpleType</li><li>IntegerType</li><li>FloatingType</li><li>BooleanType</li><li>Immutable</li></ul><p>Vala.Interface</p><ul><li>CCode</li><li>DBus</li></ul><p>Vala.Enum</p><ul><li>CCode</li><li>Flags</li></ul><p>Vala.Method</p><ul><li>CCode</li><li>DBus</li><li>ReturnsModifiedPointer</li><li>FloatingReference</li><li>NoWrapper</li><li>NoReturn</li><li>ModuleInit</li></ul><p>Vala.CreationMethod</p><blockquote><p><em>Same as Vala.Method - this class inherits from Method</em></p></blockquote><p>Vala.FormalParameter</p><ul><li>CCode</li></ul><p>Vala.Property</p><ul><li>CCode</li><li>DBus</li><li>NoAccessorMethod</li><li>Description <ul><li>nick</li><li>blurb</li></ul></li></ul><p>Vala.PropertyAccessor</p><ul><li>CCode</li></ul><p>Vala.Delegate</p><ul><li>CCode</li></ul><p>Vala.Constant</p><ul><li>CCode</li></ul><p>Vala.Field</p><ul><li>CCode</li></ul><p>Vala.Signal</p><ul><li>DBus</li><li>Signal</li><li>HasEmitter</li></ul>',39)])])}const h=l(o,[["render",r]]);export{m as __pageData,h as default};
