import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"Documentation for Contributors to Vala","description":"","frontmatter":{},"headers":[],"relativePath":"contributor-guide/index.md","filePath":"contributor-guide/index.md","lastUpdated":1759534595000}'),o={name:"contributor-guide/index.md"};function s(r,e,l,h,d,p){return t(),i("div",null,[...e[0]||(e[0]=[n(`<h1 id="documentation-for-contributors-to-vala" tabindex="-1">Documentation for Contributors to Vala <a class="header-anchor" href="#documentation-for-contributors-to-vala" aria-label="Permalink to &quot;Documentation for Contributors to Vala&quot;">​</a></h1><h4 id="compiler-guide" tabindex="-1"><a href="./compiler-guide.html">Compiler Guide</a> <a class="header-anchor" href="#compiler-guide" aria-label="Permalink to &quot;[Compiler Guide](compiler-guide)&quot;">​</a></h4><p>Vala follows a collaborative, open source development model. The following guidelines are here to help if you want to contribute back to the project.</p><h2 id="building-from-source" tabindex="-1">Building from Source <a class="header-anchor" href="#building-from-source" aria-label="Permalink to &quot;Building from Source&quot;">​</a></h2><p>See the <a href="https://gitlab.gnome.org/GNOME/vala/-/blob/master/README.md" target="_blank" rel="noreferrer">&#39;Building Vala&#39; section of the README.md file</a> in Vala&#39;s source repository.</p><h2 id="development-process" tabindex="-1">Development Process <a class="header-anchor" href="#development-process" aria-label="Permalink to &quot;Development Process&quot;">​</a></h2><h3 id="submitting-bug-reports" tabindex="-1">Submitting Bug Reports <a class="header-anchor" href="#submitting-bug-reports" aria-label="Permalink to &quot;Submitting Bug Reports&quot;">​</a></h3><p>Vala uses <a href="https://gitlab.gnome.org/GNOME/vala/issues" target="_blank" rel="noreferrer">GNOME&#39;s GitLab</a> to track issues.</p><h3 id="submitting-patches" tabindex="-1">Submitting Patches <a class="header-anchor" href="#submitting-patches" aria-label="Permalink to &quot;Submitting Patches&quot;">​</a></h3><p>Patches should be submitted through Vala&#39;s GNOME GitLab instance as a <a href="https://gitlab.gnome.org/GNOME/vala/merge_requests" target="_blank" rel="noreferrer">merge request</a>. See the <a href="https://wiki.gnome.org/GitLab" target="_blank" rel="noreferrer">GNOME Wiki&#39;s GitLab documentation</a> for more details.</p><p>If you are not a GNOME developer then you will need to first create a fork of Vala to your personal GNOME GitLab instance, which you then clone to your local machine.</p><p>Patches to the compiler should include one or more test cases.</p><p>Patches will also be accepted as attachments to an issue.</p><h3 id="reviewing-and-updating-patches" tabindex="-1">Reviewing and Updating Patches <a class="header-anchor" href="#reviewing-and-updating-patches" aria-label="Permalink to &quot;Reviewing and Updating Patches&quot;">​</a></h3><p>If your merge request requires updating after review then use <code>git rebase --interactive</code> to squash the changes and <code>git push --force</code> the updated branch to your GNOME GitLab instance. GitLab will then pick up the changes and show them in the merge request.</p><h3 id="committing-patches" tabindex="-1">Committing Patches <a class="header-anchor" href="#committing-patches" aria-label="Permalink to &quot;Committing Patches&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">TODO</p><p>Add information about how to commit patches to the compiler project.</p><p>Feel free to help: <a href="https://github.com/vala-lang/vala-docs" target="_blank" rel="noreferrer">Vala Docs Repository</a>.</p></div><h2 id="maintaining-bindings" tabindex="-1">Maintaining Bindings <a class="header-anchor" href="#maintaining-bindings" aria-label="Permalink to &quot;Maintaining Bindings&quot;">​</a></h2><p>The Vala repository carries a number of bindings to libraries. The bindings are written in one of three ways:</p><ol><li>Manually</li><li>Generated using <code>vapigen</code> from a GIR (GObject Introspection Repository) file</li><li>Generated using <code>vapigen</code> from a deprecated GIDL file</li></ol><p>To update a binding the first thing to do is find how the binding is written. Look at the top of the VAPI file. If there is no comment <code>generated by vapigen, do not modify</code> then the VAPI is written manually. For example <code>glib-2.0.vapi</code> is written manually. If the VAPI is generated using files from the <code>./metadata/</code> directory then the VAPI is generated from a GIR file. For example <code>gio-2.0.vapi</code> is generated from a GIR file. If the VAPI is generated using files from the <code>./packages/</code> directory then the VAPI is generated from a GIDL file. For example the <code>gtk+-2.0.vapi</code> is generated from a GIDL file, but the <code>gtk+-3.0.vapi</code> is generated from the GIR.</p><p>Patches should be submitted through the merge request process <a href="#submitting-patches">outlined above</a>. Patches for generated bindings should also include the changes to the VAPI itself. The Vala repository keeps the generated VAPIs in version control as well as the metadata. There is no need for test cases to be added for bindings.</p><ul><li><a href="./../developer-guides/bindings/writing-a-vapi-manually.html">Writing a VAPI Without Using GObject Introspection</a> - detailed guide on writing a VAPI manually</li><li><a href="./../developer-guides/bindings/generating-a-vapi-with-gobject-introspection.html">Generating a VAPI with GObject Introspection</a> - details on generating a VAPI using <code>vapigen</code></li></ul><h2 id="developing-the-compiler" tabindex="-1">Developing the Compiler <a class="header-anchor" href="#developing-the-compiler" aria-label="Permalink to &quot;Developing the Compiler&quot;">​</a></h2><h3 id="documentation" tabindex="-1">Documentation <a class="header-anchor" href="#documentation" aria-label="Permalink to &quot;Documentation&quot;">​</a></h3><ul><li><a href="./compiler-guide.html">Compiler Guide</a> - Documentation for hacking on the compiler</li><li><a href="https://gnome.pages.gitlab.gnome.org/vala/manual/attributes.html" target="_blank" rel="noreferrer">Code Attributes</a></li></ul><p>The internal API documentation, in Valadoc form, should be built from the source:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> doc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> internal-api-docs</span></span></code></pre></div><p>This will generate output similar to <a href="https://gnome.pages.gitlab.gnome.org/vala/docs/index.html" target="_blank" rel="noreferrer">https://gnome.pages.gitlab.gnome.org/vala/docs/index.html</a></p><h3 id="debugging" tabindex="-1">Debugging <a class="header-anchor" href="#debugging" aria-label="Permalink to &quot;Debugging&quot;">​</a></h3><p>Using <code>--enable-debug</code> will include debugging symbols in the Vala compiler:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> distclean</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./autogen.sh</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --enable-debug</span></span></code></pre></div><p>This will enable Vala source files with line numbers to be shown when using <code>gdb</code> to generate a backtrace after a segmentation fault.</p><p>You can also change GLib criticals and warnings to generate a segmentation fault to enable a backtrace. This is done with the <code>G_DEBUG</code> environment variable:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">G_DEBUG</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">fatal-criticals</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gdb</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">my_valac_version</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_test_program.vala</span></span></code></pre></div><p>See <a href="https://developer.gnome.org/glib/stable/glib-running.html" target="_blank" rel="noreferrer">Running and debugging GLib Applications</a> for more information on <code>G_DEBUG</code>.</p><h3 id="the-build-server" tabindex="-1">The Build Server <a class="header-anchor" href="#the-build-server" aria-label="Permalink to &quot;The Build Server&quot;">​</a></h3><p>Vala maintainers make use of a <a href="http://paldo.org:8010/" target="_blank" rel="noreferrer">Buildbot server</a> to build a selection of projects written in Vala with a version of Vala from the main GNOME git repository. Of main interest to contributors is the <a href="http://paldo.org:8010/builders/vala-staging" target="_blank" rel="noreferrer">vala-staging builder</a> and also the <a href="http://paldo.org:8010/builders/vala-master" target="_blank" rel="noreferrer">vala-master builder</a>. Builds from these servers include log files from STDIO for each build. This helps identify any problems with a patch that was committed to Vala.</p>`,38)])])}const u=a(o,[["render",s]]);export{c as __pageData,u as default};
