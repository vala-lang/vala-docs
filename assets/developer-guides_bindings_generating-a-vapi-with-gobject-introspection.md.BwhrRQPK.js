import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"Generating a VAPI with GObject Introspection","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/generating-a-vapi-with-gobject-introspection.md","filePath":"developer-guides/bindings/generating-a-vapi-with-gobject-introspection.md","lastUpdated":1760471362000}'),n={name:"developer-guides/bindings/generating-a-vapi-with-gobject-introspection.md"};function l(h,i,o,p,r,d){return e(),a("div",null,[...i[0]||(i[0]=[t(`<h1 id="generating-a-vapi-with-gobject-introspection" tabindex="-1">Generating a VAPI with GObject Introspection <a class="header-anchor" href="#generating-a-vapi-with-gobject-introspection" aria-label="Permalink to &quot;Generating a VAPI with GObject Introspection&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>Vala is designed to use existing libraries that have a C ABI (Application Binary Interface) without the need for runtime bindings. A Vala program requires a Vala API file (<code>.vapi</code>) at compile-time for each library used. A VAPI file contains declarations for a library&#39;s classes, methods, etc. in Vala syntax and how to translate them to C.</p><p>The <code>vapigen</code> tool is used to generate a VAPI file from a GIR (GObject Introspection Repository) file. <code>vapigen</code> is usually included with <code>valac</code> by the distributions or a separate Vala tools/development package.</p><p>The binding generation follows several steps:</p><ul><li>get the library&#39;s GIR file</li><li>use <code>vapigen</code> to generate the VAPI binding from the GIR file</li><li>tweak the binding generation with metadata and custom code</li></ul><p>Also read the <a href="./upstream-guide.html">Upstream Guide</a> for details about adding VAPI generation to a projects&#39; build system. This includes Autotools integration.</p><p>For libraries without annotations for GObject introspection see <a href="./writing-a-vapi-manually.html">Writing a VAPI Manually</a>.</p><p>To use the binding at compile time you will still need the C headers and library installed.</p><h2 id="gobject-introspection-repository-files" tabindex="-1">GObject Introspection Repository Files <a class="header-anchor" href="#gobject-introspection-repository-files" aria-label="Permalink to &quot;GObject Introspection Repository Files&quot;">​</a></h2><p>This section explains how a GIR file is created. This is useful when fixing VAPI generation because it is better to fix the GObject introspection annotations in the source file. Then all bindings can benefit from the fix.</p><p>There is also some background information on typelib files and other languages that produce C ABI compatible libraries. This helps put the Vala binding generation process in a wider context.</p><p>If a library generates a GIR file it can usually be obtained from your distribution as part of the development files for the library.</p><h3 id="source-code-annotations-and-g-ir-scanner" tabindex="-1">Source Code Annotations and g-ir-scanner <a class="header-anchor" href="#source-code-annotations-and-g-ir-scanner" aria-label="Permalink to &quot;Source Code Annotations and g-ir-scanner&quot;">​</a></h3><p>A GIR file is an XML file that describes the objects, structures, constants, enumerations and functions of a library&#39;s public interface.</p><p>The public interface is identified with the use of documentation comments. The comments are in GTK-Doc format. Here is an example from <a href="https://gitlab.gnome.org/GNOME/gtk/blob/gtk-3-22/gtk/gtkbutton.c" target="_blank" rel="noreferrer">gtkbutton.c</a> of the GTK+ graphical user interface library, version 3.22. The GObject introspection annotations are between the parentheses in the comments:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * gtk_button_new_from_icon_name:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@icon_name:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> (nullable): an icon name or %NULL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@size:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> (type int): an icon size (#GtkIconSize)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Creates a new button containing an icon from the current icon theme.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * If the icon name isn’t known, a “broken image” icon will be</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * displayed instead. If the current icon theme is changed, the icon</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * will be updated appropriately.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * This function is a convenience wrapper around gtk_button_new() and</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * gtk_button_set_image().</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Returns: a new #GtkButton displaying the themed icon</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> *</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Since: 3.10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">GtkWidget</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gtk_button_new_from_icon_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gchar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">icon_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                GtkIconSize  </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GtkWidget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">button;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  GtkWidget </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">image;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> gtk_image_new_from_icon_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (icon_name, size);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  button </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  g_object_new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (GTK_TYPE_BUTTON,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           &quot;image&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, image,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">           NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> button;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In this example the parameter, <code>icon_name</code>, has been annotated as nullable. For more details and a list of the annotations read <a href="https://gi.readthedocs.io/en/latest/annotations/giannotations.html" target="_blank" rel="noreferrer">GObject-Introspection Annotations</a>.</p><p>The program <code>g-ir-scanner</code> is used to read the C source files and generate the GIR. This is how <code>gtk_button_new_from_icon_name</code> looks in the Gtk-3.0.gir file:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">constructor</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;new_from_icon_name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           c:identifier</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gtk_button_new_from_icon_name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">           version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xml:space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Creates a new button containing an icon from the current icon theme.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">If the icon name isn&#39;t known, a “broken image” icon will be</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">displayed instead. If the current icon theme is changed, the icon</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">will be updated appropriately.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">This function is a convenience wrapper around gtk_button_new() and</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gtk_button_set_image().&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">return-value</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transfer-ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xml:space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;a new #GtkButton displaying the themed icon&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Widget&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GtkWidget*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">return-value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;icon_name&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             transfer-ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             nullable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">             allow-none</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xml:space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;an icon name or %NULL&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;utf8&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;const gchar*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameter</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;size&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> transfer-ownership</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;none&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xml:space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preserve&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;an icon size (#GtkIconSize)&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">doc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gint&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> c:type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GtkIconSize&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>Note that the <code>icon_name</code> parameter has <code>nullable=&quot;1&quot;</code>. The documentation comments are also included in the GIR and these can be used by Valadoc to create documentation for the interface. For example here is the <a href="https://valadoc.org/gtk+-3.0/Gtk.Button.Button.from_icon_name.html" target="_blank" rel="noreferrer">Button.from_icon_name</a> documentation at Valadoc.org.</p><p>For completeness this next sample shows how <code>Button.from_icon_name</code> appears in the gtk+-3.0.vapi:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cheader_filename = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gtk/gtk.h&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, type_id = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;gtk_button_get_type ()&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Atk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Implementor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Actionable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Activatable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Buildable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (has_construct_function = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, type = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GtkWidget*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (since = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;3.10&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from_icon_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? icon_name, [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GtkIconSize&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IconSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IconSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BUTTON</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The VAPI has <code>icon_name</code> correctly marked as nullable.</p><p>For more details on GObject introspection read <a href="https://gi.readthedocs.io/en/latest/" target="_blank" rel="noreferrer">https://gi.readthedocs.io/en/latest/</a>.</p><h3 id="typelib-files-and-libgirepository" tabindex="-1">Typelib Files and libgirepository <a class="header-anchor" href="#typelib-files-and-libgirepository" aria-label="Permalink to &quot;Typelib Files and libgirepository&quot;">​</a></h3><p>You may come across documentation about generating a GIR from a typelib file, but GIR files generated in this way will have lost relevant information and lead to an awkward binding with Vala.</p><h3 id="other-languages-that-support-the-c-abi" tabindex="-1">Other Languages that Support the C ABI <a class="header-anchor" href="#other-languages-that-support-the-c-abi" aria-label="Permalink to &quot;Other Languages that Support the C ABI&quot;">​</a></h3><p>At present GObject introspection only works with annotations of C code. Other languages, however, can compile libraries that maintain the C ABI. For example Go has the <code>-buildmode=c-shared</code> option. This tutorial, <a href="https://medium.com/learning-the-go-programming-language/calling-go-functions-from-other-languages-4c7d8bcc69bf" target="_blank" rel="noreferrer">Calling Go Functions from Other Languages</a> explains more about Go&#39;s <code>c-shared</code> build mode. Rust also can produce C ABI compatible code with the <code>extern</code> keyword and <code>#[no_mangle]</code>. See the &#39;Calling Rust code from C&#39; section of <a href="https://doc.rust-lang.org/book/first-edition/ffi.html" target="_blank" rel="noreferrer">FFI - The Rust Programming Language</a>. GIR files can be used to create bindings for many languages, including Python, Lua, Javascript and Haskell. If Go or Rust or any other language that can compile code to the C ABI can also produce GIR files then it may be possible to automatically generate bindings using existing generators like <code>vapigen</code>.</p><h2 id="generating-the-vapi-file" tabindex="-1">Generating the VAPI File <a class="header-anchor" href="#generating-the-vapi-file" aria-label="Permalink to &quot;Generating the VAPI File&quot;">​</a></h2><p>To convert the <code>.gir</code> file into a Vala API file use:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vapigen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --library</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poppler-glib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> poppler-glib/poppler-glib.gir</span></span></code></pre></div><p>If you are updating an officially maintained vala binding in the source code tree, you can go in the vapi directory and run:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./vapigen/vapigen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --library</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clutter-gtk-1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --vapidir=.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --metadatadir=packages/clutter-gtk-1.0/</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> packages/clutter-gtk-1.0/clutter-gtk-1.0.gir</span></span></code></pre></div><p>or just:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">make</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> clutter-gtk-1.0</span></span></code></pre></div><p>Do not forget to include the packages needed by the library. If the library uses GTK+ and GConf, use:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vapigen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gtk+-2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gconf-2.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --library</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [...]</span></span></code></pre></div><p>Otherwise you&#39;ll get errors like that, or an incomplete binding:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> The</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> type</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\`</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GLib.tkWidget</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39; could not be found</span></span></code></pre></div><h2 id="fixing-vapi-generation-with-metadata" tabindex="-1">Fixing VAPI Generation with Metadata <a class="header-anchor" href="#fixing-vapi-generation-with-metadata" aria-label="Permalink to &quot;Fixing VAPI Generation with Metadata&quot;">​</a></h2><p>Sometimes it is necessary to fix up the generated VAPI file; for instance, <code>vapigen</code> might not identify <code>out</code> or <code>ref</code> parameters, or identify structures that should generally be put on the stack instead of allocated, and passed by reference to methods.</p><p>Instead of updating the VAPI file, and keeping it updated with every upstream API change, <code>vapigen</code> output can be tweaked with a <code>.metadata</code> file. For instance, in <em>poppler-glib</em> the <em>poppler_page_get_size</em> function has two out parameters, <em>width</em> and <em>height</em>; in order to create a valid Vala signature in our VAPI file, we need to add these lines inside the <code>poppler-glib.metadata</code> file:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poppler_page_get_size.width is_out=&quot;1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">poppler_page_get_size.height is_out=&quot;1&quot;</span></span></code></pre></div><p>Which translates to: &quot;the <em>width</em> parameter of <em>poppler_page_get_size</em> is an out parameter&quot; and &quot;the <em>height</em> parameter of <em>poppler_page_get_size</em> is an out parameter&quot;.</p><p>Metadata files must have the same base name as the GIR, but instead of a <code>gir</code> extension they use <code>metadata</code>.</p><p>To get vapigen to pick up your metadata file, you must provide the name of the directory to look for it in:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vapigen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --library</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bar-1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --metadatadir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./metadata/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Foo-1.0.gir</span></span></code></pre></div><p>GObject Introspection and Vala support different things. Sometimes one not supporting something the other does is a bug, sometimes it is that one has made certain assumptions about APIs that the other does not. If there is a problem generating the VAPI then it is best to work through the problem in this order:</p><ol><li>Check the C source for missing GObject Introspection annotations, e.g. null</li><li>Check the arguments to <code>g-ir-scanner</code>, e.g. C header files</li><li>Add metadata for <code>vapigen</code></li></ol><p>For detailed information on the features and syntax of metadata files, see the Vala Manual section on <a href="https://gnome.pages.gitlab.gnome.org/vala/manual/gir-metadata-format.html" target="_blank" rel="noreferrer">GIR metadata format</a>.</p><h2 id="c-headers" tabindex="-1">C Headers <a class="header-anchor" href="#c-headers" aria-label="Permalink to &quot;C Headers&quot;">​</a></h2><p>Most libraries tend to install one header file, which will then include any additional headers. If the VAPI does not have the correct header filename then the best fix is to amened the generation process of the GIR. To include a C header filename in a GIR <code>g-ir-scanner</code> has the <code>--c-include</code> option. For example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">g-ir-scanner</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --c-include=example/example.h</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project_source.c</span></span></code></pre></div><p><code>vapigen</code> will then use this filename from the GIR.</p><p>Some libraries need multiple header files in the VAPI. Using <code>--c-include</code> multiple times will allow these to be included in the GIR and so included in the VAPI.</p><p>If it is not possible to amend the GIR generation then the header can be included using <code>vapigen</code> and metadata. This can be done for a namespace or for a type. For example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PnpIds cheader_filename=&quot;libgnome-desktop/gnome-pnp-ids.h&quot;</span></span></code></pre></div><h3 id="duplicate-symbols" tabindex="-1">Duplicate Symbols <a class="header-anchor" href="#duplicate-symbols" aria-label="Permalink to &quot;Duplicate Symbols&quot;">​</a></h3><p>The single most common error seen the first time one tries to generate a VAPI is one about duplicate symbols. Vala has a single scope for methods, virtual methods, signals, and properties. Assuming that the signatures match, vapigen will automatically combine several of these into a single entity--the most extreme example of this is probably a virtual signal, which can combine a signal, virtual method, and method in one item. For example, GIO has the following in GLib.Application:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HasEmitter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> signal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> activate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ();</span></span></code></pre></div><p>That said, some conflicts cannot be resolved automatically by vapigen and will require some metadata. The most common conflict is when a method, virtual method, or signal disagrees with another method, virtual method, or signal with the same name regarding arguments or return values. For example, <a href="https://developer-old.gnome.org/clutter/stable/ClutterActor.html" target="_blank" rel="noreferrer">ClutterActor</a> has an <a href="https://developer-old.gnome.org/clutter/stable/ClutterActor.html#ClutterActor-event" target="_blank" rel="noreferrer">event signal</a>, which takes a single argument: a <a href="http://developer-old.gnome.org/clutter/stable/clutter-Events.html#ClutterEvent" target="_blank" rel="noreferrer">ClutterEvent</a> intance. It also has an <a href="http://developer-old.gnome.org/clutter/stable/ClutterActor.html#clutter-actor-event" target="_blank" rel="noreferrer">event method</a> which takes two arguments: a ClutterEvent instance and a boolean. In this case, we resolve the conflict by renaming the method to &quot;emit_event&quot;:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Actor.event#method name=&quot;emit_event&quot;</span></span></code></pre></div><p>Another common problem is when a symbol of a subclass has the same name as that of a base class but the signatures do not match. Depending on the situation, you can rename or skip one of the symbols (usually in the subclass).</p><h3 id="nested-namespaces" tabindex="-1">Nested Namespaces <a class="header-anchor" href="#nested-namespaces" aria-label="Permalink to &quot;Nested Namespaces&quot;">​</a></h3><p>GIR does not support nested namespaces (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=660879" target="_blank" rel="noreferrer">bug #660879</a>), but Vala does. If you prefer, you can just ignore this Vala feature, but some bindings can be quite a bit cleaner if we make use of it.</p><p>A good example of nested namespaces in Vala is moving the hundreds of keysmys in Clutter into a Clutter.Key namespace, allowing us to use Clutter.Key.Right instead of Clutter.KEY_Right. This is accomplished with a single line of metadata:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">KEY_* skip=false name=&quot;KEY_(.+)&quot; parent=&quot;Clutter.Key&quot;</span></span></code></pre></div><p>We can also use the same technique to group similar functions together, like for the <a href="http://developer-old.gnome.org/gio/stable/gio-GContentType.html" target="_blank" rel="noreferrer">GContentType</a> family in GIO:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">content_type_* parent=&quot;GLib.ContentType&quot; name=&quot;content_type_(.*)&quot;</span></span></code></pre></div><h3 id="nullability-of-return-values" tabindex="-1">Nullability of Return Values <a class="header-anchor" href="#nullability-of-return-values" aria-label="Permalink to &quot;Nullability of Return Values&quot;">​</a></h3><p>GIR assumes all pointer return values are nullable (&quot;allow-none&quot; in G-I terminology) and does not provide a way to override this assumption (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=660879" target="_blank" rel="noreferrer">bug #660879</a>). Vala, on the other hand, assumes return values are not nullable unless otherwise otherwise specified, and comparing a non-nullable value to null (e.g., to check for validity) will cause a warning. Luckily, making a value nullable is easy to do from a metadata file, as you can see from this example (for <a href="http://developer-old.gnome.org/clutter/stable/ClutterActor.html#clutter-actor-get-parent" target="_blank" rel="noreferrer">clutter_actor_get_parent</a>):</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Actor.get_parent nullable</span></span></code></pre></div><h3 id="variadic-functions" tabindex="-1">Variadic Functions <a class="header-anchor" href="#variadic-functions" aria-label="Permalink to &quot;Variadic Functions&quot;">​</a></h3><p>GObject introspection does not currently support variadic methods. It actually generates all the information Vala needs to do so, but it will mark the function as introspectable=&quot;0&quot;, which is the same that happens when you add a &quot;skip&quot; annotation to the method. Therefore, in order to expose these functions in Vala, we need a simple annotation to un-skip the symbol. For example, this is how <a href="http://developer-old.gnome.org/clutter/stable/clutter-Implicit-Animations.html#clutter-actor-animate" target="_blank" rel="noreferrer">clutter_actor_animate</a> is exposed from metadata:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Actor.animate skip=false</span></span></code></pre></div><h3 id="ownership-of-struct-fields" tabindex="-1">Ownership of Struct Fields <a class="header-anchor" href="#ownership-of-struct-fields" aria-label="Permalink to &quot;Ownership of Struct Fields&quot;">​</a></h3><p>GObject introspection does not currently offer a way to specify whether or not fields contain an owned reference. It is therefore impossible for Vala to know whether or not it should ref or copy a value being assigned to this field. Again, this is easy to fix with metadata... using <a href="http://developer.gnome.org/gio/stable/gio-D-Bus-Introspection-Data.html#GDBusAnnotationInfo-struct" target="_blank" rel="noreferrer">GDBusAnnotationInfo</a> as an example:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">DBusAnnotationInfo.*#field unowned=false</span></span></code></pre></div><h3 id="virtual-methods-without-invokers" tabindex="-1">Virtual Methods Without Invokers <a class="header-anchor" href="#virtual-methods-without-invokers" aria-label="Permalink to &quot;Virtual Methods Without Invokers&quot;">​</a></h3><p>Some libraries contain virtual methods without emitters, which GObject introspection does not currently offer a way to annotate (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=730480" target="_blank" rel="noreferrer">bug #730480</a>). Fixing these basically means adding any information that would normally go in annotations to the metadata.</p><h3 id="abstract-virtual-distinction" tabindex="-1">Abstract/Virtual Distinction <a class="header-anchor" href="#abstract-virtual-distinction" aria-label="Permalink to &quot;Abstract/Virtual Distinction&quot;">​</a></h3><p>Vala distinguishes between abstract and virtual methods (virtual methods do not need to be implemented by an class which implements the interface whereas abstract methods do require an implementation) while GIR does not. In order to mark a method as virtual instead of abstract, you could do something like this (from <a href="http://developer-old.gnome.org/gtksourceview/stable/GtkSourceCompletionProposal.html#gtk-source-completion-proposal-equal" target="_blank" rel="noreferrer">gtk_source_completion_proposal_equal</a>):</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">CompletionProposal.equal#virtual_method virtual</span></span></code></pre></div><h3 id="generic-types" tabindex="-1">Generic Types <a class="header-anchor" href="#generic-types" aria-label="Permalink to &quot;Generic Types&quot;">​</a></h3><p>GObject Introspection only supports a few different generic types, and that support is hard-coded and cannot currently be extended to other types which should be generic (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=639908" target="_blank" rel="noreferrer">bug #639908</a>). For example, <a href="http://developer-old.gnome.org/glib/unstable/glib-Keyed-Data-Lists.html" target="_blank" rel="noreferrer">GDataList</a> is a generic in Vala but is not supported as such by GObject Introspection, so the the following is necessary for <a href="http://developer.gnome.org/libsoup/stable/libsoup-2.4-HTML-Form-Support.html#soup-form-encode-datalist" target="_blank" rel="noreferrer">soup_form_encode_datalist</a>:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">form_encode_datalist.form_data_set type_arguments=&quot;string&quot;</span></span></code></pre></div><h3 id="gclosure-types" tabindex="-1">GClosure Types <a class="header-anchor" href="#gclosure-types" aria-label="Permalink to &quot;GClosure Types&quot;">​</a></h3><p>GIR does not provide a way to annotate the type of a callback (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=636812" target="_blank" rel="noreferrer">bug #636812</a>) contained in a <a href="http://developer-old.gnome.org/gobject/stable/gobject-Closures.html" target="_blank" rel="noreferrer">GClosure</a>. Although this is not an error which will cause bindings to not be generated, the result is an API that is extremely difficult to use correctly. For example, you can provide the delegate type of <a href="http://developer-old.gnome.org/clutter/stable/clutter-Key-Bindings.html#clutter-binding-pool-install-closure" target="_blank" rel="noreferrer">clutter_binding_pool_install_closure</a> from the metadata:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">BindingPool.install_closure.closure type=&quot;owned BindingActionFunc&quot;</span></span></code></pre></div><h3 id="inheritance" tabindex="-1">Inheritance <a class="header-anchor" href="#inheritance" aria-label="Permalink to &quot;Inheritance&quot;">​</a></h3><p>GObject Introspection currently only handles inheritance for GObject-derived types (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=560692" target="_blank" rel="noreferrer">bug #560692</a>). To get around it in metadata you can use &quot;base_type&quot;:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Buffer base_type=&quot;Gst.MiniObject&quot;</span></span></code></pre></div><h3 id="asynchronous-finish-functions" tabindex="-1">Asynchronous Finish Functions <a class="header-anchor" href="#asynchronous-finish-functions" aria-label="Permalink to &quot;Asynchronous Finish Functions&quot;">​</a></h3><p>GObject Introspection does not currently offer a way to annotate the relationship between an async function and its corresponding finish function (<a href="https://bugzilla.gnome.org/show_bug.cgi?id=623635" target="_blank" rel="noreferrer">bug #623635</a>). By default Vala will look for function with the same base name, but a &quot;_finish&quot; suffix, but you can point it to other functions in metadata using &quot;finish_name&quot;:</p><div class="language-xml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">xml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Service.lookupv finish_name=&quot;secret_service_lookup_finish&quot;</span></span></code></pre></div><h3 id="macros" tabindex="-1">Macros <a class="header-anchor" href="#macros" aria-label="Permalink to &quot;Macros&quot;">​</a></h3><p>Since GObject Introspection is focused primarily on runtime bindings for languages such as Python and JavaScript, it ignores preprocessor macros. Although this decision makes sense for them (you can&#39;t dlsym(3) a macro), Vala is capable of utilizing macros. However, since no information on macros is included in the GIR the only way to expose macros is by adding them to a *-custom.vala file.</p><h2 id="fixing-vapi-generation-with-custom-vala-code" tabindex="-1">Fixing VAPI Generation with Custom Vala Code <a class="header-anchor" href="#fixing-vapi-generation-with-custom-vala-code" aria-label="Permalink to &quot;Fixing VAPI Generation with Custom Vala Code&quot;">​</a></h2><p>Remember that thing about the world not being perfect? Well, a metadata file isn&#39;t always enough either. Sometimes you&#39;ll need the ability to inject custom Vala code into your VAPI. Technically, this file can have any name and there can be more than one per package, but the convention is to use the same file name and directory as the GIR followed by &quot;-custom.vala&quot;. For instance, our Foo-1.0.gir might have a corresponding metadata file named Foo-1.0-custom.vala. Once you have your custom Vala file, simply include it in the argument list you pass to <code>vapigen</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">vapigen</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --library</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo-1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bar-1.0</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    --metadatadir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./metadata/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Foo-1.0.gir</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    Foo-1.0-custom.vala</span></span></code></pre></div><h3 id="no-generic-methods" tabindex="-1">No Generic Methods <a class="header-anchor" href="#no-generic-methods" aria-label="Permalink to &quot;No Generic Methods&quot;">​</a></h3><p>Vala supports generic methods, such as <a href="http://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-get" target="_blank" rel="noreferrer">g_object_get</a>, while GObject Introspection does not. Unfortunately, metadata alone cannot currently resolve this issue--you will need to skip the method in metadata and recreate it in custom.vala.</p><h2 id="a-note-on-the-deprecated-gidl-method" tabindex="-1">A Note on the Deprecated GIDL Method <a class="header-anchor" href="#a-note-on-the-deprecated-gidl-method" aria-label="Permalink to &quot;A Note on the Deprecated GIDL Method&quot;">​</a></h2><p>The traditional approach was to use <a href="https://wiki.gnome.org/Projects/Vala/Bindings/GI" target="_blank" rel="noreferrer">vala-gen-introspect</a> to generate <code>.gi</code> files. Then use <code>vapigen</code> to generate the VAPI. This method is now deprecated.</p><p>For the maintenance of existing bindings see the Vala Manual <a href="https://gnome.pages.gitlab.gnome.org/vala/manual/gidl-metadata-format.html" target="_blank" rel="noreferrer">GIDL metadata format</a>. This metadata format was used to control the generation of the VAPI from a <code>.gi</code> file.</p>`,106)])])}const g=s(n,[["render",l]]);export{c as __pageData,g as default};
