import{_ as t,c as e,o as i,ag as n}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Writing a VAPI Manually","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually.md","filePath":"developer-guides/bindings/writing-a-vapi-manually.md","lastUpdated":1761243514000}'),o={name:"developer-guides/bindings/writing-a-vapi-manually.md"};function r(l,a,s,u,d,c){return i(),e("div",null,[...a[0]||(a[0]=[n('<h1 id="writing-a-vapi-manually" tabindex="-1">Writing a VAPI Manually <a class="header-anchor" href="#writing-a-vapi-manually" aria-label="Permalink to &quot;Writing a VAPI Manually&quot;">​</a></h1><p>This document intends to be a tutorial and reference on how to write a Vala binding to an existing C library. If the library uses GLib, do not follow this document. Instead read <a href="./generating-a-vapi-with-gobject-introspection.html">Generating a VAPI with GObject Introspection</a>. A library may not follow the GLib coding practices precisely, but it is better to fix the library to work with GObject Introspection than to write a manual binding.</p><p>C programmers are a rather liberal bunch; certain procedures are done in a multitude of ways depending on the mood of the programmer, whereas Vala is much more restricted. This guide cannot possibly cover all possible cases of different APIs written by C programmers. It is your job to understand the C API and present it with Vala-friendly semantics.</p><p>There is a lot of material in this document and that can make it hard to take in at first. A practical approach to working through the tutorial would be to:</p><ol><li>Bind an enum first because enums are easy to test.</li></ol><blockquote><p>Once your test gives the expected result you know that the build process works. This means working through the &quot;Getting Started&quot; section and the &quot;Enums and Flags&quot; sub-section. Binding an enum also introduces the idea that there isn&#39;t a straight mapping from C to Vala</p></blockquote><ol start="2"><li>Bind the creation and destruction of a compact class next.</li></ol><blockquote><p>This means working through the &quot;Using Vala&#39;s Automatic Memory Management&quot; section and starting to understand that a struct in C can be bound as either a simple type, a struct or a compact class in Vala. The binding can be tested by looking at the C code produced from a single line in Vala like <code>new MyBoundCompactClass ();</code></p></blockquote><ol start="3"><li>Bind methods of the compact class.</li></ol><blockquote><p>This is when your binding starts to become useful and it will also give an overview of this document. Once you have an overview the document becomes more of a reference for solving tricky function bindings</p></blockquote><p>The above assumes that the library is written in an object oriented style of C. A C binding, however, is only made up of structs and functions so understanding that in enough detail is the purpose of the approach.</p><h4 id="_1-prerequisites" tabindex="-1"><a href="./writing-a-vapi-manually/01-00-prerequisites.html" style="color:white;">1. Prerequisites</a> <a class="header-anchor" href="#_1-prerequisites" aria-label="Permalink to &quot;[1. Prerequisites](writing-a-vapi-manually/01-00-prerequisites){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_2-getting-started" tabindex="-1"><a href="./writing-a-vapi-manually/02-00-getting-started.html" style="color:white;">2. Getting Started</a> <a class="header-anchor" href="#_2-getting-started" aria-label="Permalink to &quot;[2. Getting Started](writing-a-vapi-manually/02-00-getting-started){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_3-using-vala-s-automatic-memory-management" tabindex="-1"><a href="./writing-a-vapi-manually/03-00-using-auto-memory-management.html" style="color:white;">3. Using Vala&#39;s Automatic Memory Management</a> <a class="header-anchor" href="#_3-using-vala-s-automatic-memory-management" aria-label="Permalink to &quot;[3. Using Vala&#39;s Automatic Memory Management](writing-a-vapi-manually/03-00-using-auto-memory-management){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_4-recognizing-vala-semantics-in-c-code" tabindex="-1"><a href="./writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code.html" style="color:white;">4. Recognizing Vala Semantics in C Code</a> <a class="header-anchor" href="#_4-recognizing-vala-semantics-in-c-code" aria-label="Permalink to &quot;[4. Recognizing Vala Semantics in C Code](writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_5-fundamentals-of-binding-a-c-function" tabindex="-1"><a href="./writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function.html" style="color:white;">5. Fundamentals of Binding a C Function</a> <a class="header-anchor" href="#_5-fundamentals-of-binding-a-c-function" aria-label="Permalink to &quot;[5. Fundamentals of Binding a C Function](writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_6-adding-vala-friendly-semantics" tabindex="-1"><a href="./writing-a-vapi-manually/06-00-adding-vala-friendly-semantics.html" style="color:white;">6. Adding Vala Friendly Semantics</a> <a class="header-anchor" href="#_6-adding-vala-friendly-semantics" aria-label="Permalink to &quot;[6. Adding Vala Friendly Semantics](writing-a-vapi-manually/06-00-adding-vala-friendly-semantics){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_7-binding-a-c-function-s-parameter-and-return-types" tabindex="-1"><a href="./writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types.html" style="color:white;">7. Binding a C Function&#39;s Parameter and Return Types</a> <a class="header-anchor" href="#_7-binding-a-c-function-s-parameter-and-return-types" aria-label="Permalink to &quot;[7. Binding a C Function&#39;s Parameter and Return Types](writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_8-binding-a-c-struct-s-fields" tabindex="-1"><a href="./writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields.html" style="color:white;">8. Binding a C Struct&#39;s Fields</a> <a class="header-anchor" href="#_8-binding-a-c-struct-s-fields" aria-label="Permalink to &quot;[8. Binding a C Struct&#39;s Fields](writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_9-extra-hints" tabindex="-1"><a href="./writing-a-vapi-manually/09-00-extra-hints.html" style="color:white;">9. Extra Hints</a> <a class="header-anchor" href="#_9-extra-hints" aria-label="Permalink to &quot;[9. Extra Hints](writing-a-vapi-manually/09-00-extra-hints){style=&quot;color: white;&quot;}&quot;">​</a></h4><h4 id="_10-awkward-situations" tabindex="-1"><a href="./writing-a-vapi-manually/10-00-awkward-situations.html" style="color:white;">10. Awkward Situations</a> <a class="header-anchor" href="#_10-awkward-situations" aria-label="Permalink to &quot;[10. Awkward Situations](writing-a-vapi-manually/10-00-awkward-situations){style=&quot;color: white;&quot;}&quot;">​</a></h4>',21)])])}const g=t(o,[["render",r]]);export{m as __pageData,g as default};
