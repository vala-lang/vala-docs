import{_ as t,c as a,o as i,ag as n}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"2.3. The CCode Attribute","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-03-the-ccode-attribute.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-03-the-ccode-attribute.md","lastUpdated":1761243551000}'),r={name:"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-03-the-ccode-attribute.md"};function o(l,e,s,d,c,u){return i(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="_2-3-the-ccode-attribute" tabindex="-1">2.3. The CCode Attribute <a class="header-anchor" href="#_2-3-the-ccode-attribute" aria-label="Permalink to &quot;2.3. The CCode Attribute&quot;">â€‹</a></h1><p>Vala generates C code in a certain style, examples are Vala following its own naming conventions and the ordering of automatically generated parameters. The <code>CCode</code> attribute provides fine control of the C code produced by Vala and will be used extensively when binding a C library that uses its own conventions.</p><p>The <code>CCode</code> attribute will be used for:</p><ul><li>including a C header file</li><li>converting from Vala naming conventions to a library&#39;s naming conventions</li><li>binding a library to Vala&#39;s assisted memory management</li><li>controlling the position of function call arguments, especially Vala generated arguments</li><li>overcoming various edge cases</li></ul><p>These are introduced at the relevant points throughout the tutorial. For a single reference see the <a href="https://gnome.pages.gitlab.gnome.org/vala/manual/attributes.html" target="_blank" rel="noreferrer">Vala Manual Attributes Section</a>.</p>',5)])])}const p=t(r,[["render",o]]);export{h as __pageData,p as default};
