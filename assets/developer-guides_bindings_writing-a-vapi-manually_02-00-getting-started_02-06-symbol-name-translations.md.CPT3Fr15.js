import{_ as a,c as t,o as e,ag as i}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"2.6. Symbol Name Translations","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-06-symbol-name-translations.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-06-symbol-name-translations.md","lastUpdated":1759534595000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/02-00-getting-started/02-06-symbol-name-translations.md"};function d(l,s,o,r,h,p){return e(),t("div",null,[...s[0]||(s[0]=[i(`<h1 id="_2-6-symbol-name-translations" tabindex="-1">2.6. Symbol Name Translations <a class="header-anchor" href="#_2-6-symbol-name-translations" aria-label="Permalink to &quot;2.6. Symbol Name Translations&quot;">â€‹</a></h1><p>Vala has symbol name translation rules from Vala to C. The default rules follow the GLib naming conventions, but for a binding the name translations can be customised with the <code>lower_case_cprefix</code>, <code>cprefix</code> and <code>cname</code> CCode details.</p><p>The following example illustrates the default symbol name translation rules. Vala&#39;s name translation rules apply to both Vala programs and bindings. Compile the following example program with <code>valac --ccode name_conversion_example.vala</code> then examine how the Vala symbol names have been translated:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    a.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UNCHANGING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Compact</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UNCHANGING</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The use of the <code>[Compact]</code> attribute makes the C code simpler and so easier to read, but the name translation rules apply to full Vala classes as well. Here is a table that summarizes the example&#39;s translations:</p><table tabindex="0"><thead><tr><th><em>Vala Identifier</em></th><th><em>C Identifier</em></th><th><em>Notes</em></th></tr></thead><tbody><tr><td><code>Foo.Bar</code></td><td><code>FooBar</code></td><td>This is the data type</td></tr><tr><td><code>new Foo.Bar ()</code></td><td><code>foo_bar_new ()</code></td><td>This is the constructor function</td></tr><tr><td><code>a.test ()</code></td><td><code>foo_bar_test (a)</code></td><td>This is a function acting on an instance</td></tr><tr><td><code>Foo.Bar.UNCHANGING</code></td><td><code>FOO_BAR_UNCHANGING</code></td><td>A constant defined with the type</td></tr></tbody></table><p>When binding the library the Vala symbol names should follow the following conventions and then <code>lower_case_cprefix</code>, <code>cprefix</code> and <code>cname</code> can be used to ensure the C symbol name matches the library:</p><table tabindex="0"><thead><tr><th><em>Vala Semantics</em></th><th><em>Vala Convention</em></th><th><em>Default Translation to C</em></th><th><em>Modify with CCode Detail</em></th></tr></thead><tbody><tr><td>Classes</td><td>!TitleCase</td><td></td><td></td></tr><tr><td>Constants</td><td>UPPER_SNAKE_CASE</td><td></td><td></td></tr><tr><td>Delegates</td><td>!TitleCase</td><td></td><td></td></tr><tr><td>Enums and Flags</td><td>!TitleCase</td><td></td><td></td></tr><tr><td>Fields</td><td>lower_snake_case</td><td></td><td></td></tr><tr><td>Methods</td><td>lower_snake_case</td><td></td><td></td></tr><tr><td>Namespaces</td><td>!TitleCase</td><td>title_case_ <br> TITLE_CASE_ <br> !TitleCase</td><td><code>lower_case_cprefix</code> <br> <code>lower_case_cprefix</code> <br> <code>cprefix</code></td></tr><tr><td>Properties</td><td>lower_snake_case</td><td></td><td></td></tr><tr><td>Structs</td><td>!TitleCase</td><td></td><td></td></tr><tr><td>Type Variables (Generics)</td><td>T (A single uppercase letter). For maps, K, V are preferred for keys and values.</td><td></td><td></td></tr></tbody></table><p>Where appropriate, expand cryptic C names into more understandable Vala ones (e.g., <code>Tx</code> into <code>Transaction</code>). Vala is usually much more compact than C, so we are willing to make different trade-offs and favor readability over being concise a bit more than C programmers generally do. In particular, <code>var</code> saves a lot of writing long type names and import helps make better use of prefixes.</p><p>Note the following:</p><ul><li>the use of <code>cprefix</code> and <code>lower_case_cprefix</code> with a namespace</li><li>the priority of a class over a namespace when using <code>cprefix</code> and <code>lower_case_cprefix</code></li><li>the use of <code>cname</code> with a function and constant</li></ul>`,11)])])}const m=a(n,[["render",d]]);export{k as __pageData,m as default};
