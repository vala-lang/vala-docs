import{_ as t,c as o,o as n,ag as i}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse(`{"title":"3.1. Pointers in C (or what all these *'s mean)","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-01-pointers-in-c.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-01-pointers-in-c.md","lastUpdated":1759534595000}`),a={name:"developer-guides/bindings/writing-a-vapi-manually/03-00-using-auto-memory-management/03-01-pointers-in-c.md"};function r(s,e,d,c,p,l){return n(),o("div",null,[...e[0]||(e[0]=[i('<h1 id="_3-1-pointers-in-c-or-what-all-these-s-mean" tabindex="-1">3.1. Pointers in C (or what all these *&#39;s mean) <a class="header-anchor" href="#_3-1-pointers-in-c-or-what-all-these-s-mean" aria-label="Permalink to &quot;3.1. Pointers in C (or what all these *&#39;s mean)&quot;">â€‹</a></h1><p>The asterisk, <code>*</code>, is the indirection operator in C. Although, be aware it is also the multiplication operator. The indirection operator means an identifier contains a pointer to a memory location. Usually the data type held in the memory location is also indicated. For example <code>int *identifier</code> means an <code>int</code> is held at the memory location pointed to by <code>identifier</code>. The data type, however, does not have to be specified and instead the &quot;generic&quot; type can be used: <code>void *identifier</code>.</p><p>There can be multiple levels of indirection, e.g. <code>char **identifier</code>.</p><p>The &#39;address of&#39; operator is ampersand, <code>&amp;</code>.</p><p>The use of the indirection operator and the address of operator is relevant to binding function signatures, which is covered in a later section. For a comprehensive explanation of pointers in C see <a href="http://boredzo.org/pointers" target="_blank" rel="noreferrer">you need to know about pointers in C</a>.</p><p>For now it is enough to understand that the pointer gives no indication of how the memory pointed to is managed. It is not known from seeing a pointer in the C code whether the memory is constant, stack allocated or heap allocated.</p>',6)])])}const u=t(a,[["render",r]]);export{m as __pageData,u as default};
