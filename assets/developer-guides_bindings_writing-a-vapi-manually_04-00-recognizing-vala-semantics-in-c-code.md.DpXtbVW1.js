import{_ as e,c as n,o as i,ag as t}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"4. Recognizing Vala Semantics in C Code","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code.md","lastUpdated":1761243551000}'),s={name:"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code.md"};function c(o,a,r,l,d,g){return i(),n("div",null,[...a[0]||(a[0]=[t('<h1 id="_4-recognizing-vala-semantics-in-c-code" tabindex="-1">4. Recognizing Vala Semantics in C Code <a class="header-anchor" href="#_4-recognizing-vala-semantics-in-c-code" aria-label="Permalink to &quot;4. Recognizing Vala Semantics in C Code&quot;">​</a></h1><p>An important difference between C and Vala is that Vala is more semantically expressive. For instance, in C <em>char*</em> can mean several things. It could be a string, an array, a pointer to a single character, an out parameter returning a character, a pointer to a character that will be modified by the routine. It is also completely unclear if this pointer can be null. Vala expresses these differences syntactically, so writing the binding requires understanding the intent of the original code.</p><p>It is easiest to start by looking through the header files and determining all the important types to be bound. For each one, find any allocation functions, copy functions and cleanup functions. From these, the right binding strategy can be inferred.</p><h4 id="_4-1-constants" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-01-constants.html">4.1. Constants</a> <a class="header-anchor" href="#_4-1-constants" aria-label="Permalink to &quot;[4.1. Constants](04-00-recognizing-vala-semantics-in-c-code/04-01-constants)&quot;">​</a></h4><h4 id="_4-2-enums-and-flags" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-02-enums-and-flags.html">4.2. Enums and Flags</a> <a class="header-anchor" href="#_4-2-enums-and-flags" aria-label="Permalink to &quot;[4.2. Enums and Flags](04-00-recognizing-vala-semantics-in-c-code/04-02-enums-and-flags)&quot;">​</a></h4><h4 id="_4-3-simple-type-structs" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.html">4.3. Simple Type Structs</a> <a class="header-anchor" href="#_4-3-simple-type-structs" aria-label="Permalink to &quot;[4.3. Simple Type Structs](04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs)&quot;">​</a></h4><h4 id="_4-4-structs" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-04-structs.html">4.4. Structs</a> <a class="header-anchor" href="#_4-4-structs" aria-label="Permalink to &quot;[4.4. Structs](04-00-recognizing-vala-semantics-in-c-code/04-04-structs)&quot;">​</a></h4><h4 id="_4-5-compact-classes" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.html">4.5. Compact Classes</a> <a class="header-anchor" href="#_4-5-compact-classes" aria-label="Permalink to &quot;[4.5. Compact Classes](04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes)&quot;">​</a></h4><ul><li><a href="./04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.html#_4-5-1-singly-owned-classes">4.5.1. Singly-Owned Classes</a></li><li><a href="./04-00-recognizing-vala-semantics-in-c-code/04-05-compact-classes.html#_4-5-2-reference-counted-classes">4.5.2. Reference-Counted Classes</a></li></ul><h4 id="_4-6-functions" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-06-functions.html">4.6. Functions</a> <a class="header-anchor" href="#_4-6-functions" aria-label="Permalink to &quot;[4.6. Functions](04-00-recognizing-vala-semantics-in-c-code/04-06-functions)&quot;">​</a></h4><h4 id="_4-7-delegates" tabindex="-1"><a href="./04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.html">4.7. Delegates</a> <a class="header-anchor" href="#_4-7-delegates" aria-label="Permalink to &quot;[4.7. Delegates](04-00-recognizing-vala-semantics-in-c-code/04-07-delegates)&quot;">​</a></h4>',11)])])}const u=e(s,[["render",c]]);export{h as __pageData,u as default};
