import{_ as i,c as t,o as s,ag as a}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"4.1. Constants","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-01-constants.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-01-constants.md","lastUpdated":1761243514000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-01-constants.md"};function o(l,e,p,c,d,r){return s(),t("div",null,[...e[0]||(e[0]=[a('<h1 id="_4-1-constants" tabindex="-1">4.1. Constants <a class="header-anchor" href="#_4-1-constants" aria-label="Permalink to &quot;4.1. Constants&quot;">â€‹</a></h1><p>This sub-section introduces: * the <code>#define</code> pre-processor directive in C * the stages the Vala compiler follows</p><p>A constant does not vary during the running of a program and must be a simple type or string. As an example, if the C library defines a constant through a <code>#define</code> statement:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#define</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CUSTOM_PI</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.14159265358979323846</span></span></code></pre></div><p><code>#define</code> is simple text substitution by the pre-processor. So relevant occurrences of <code>CUSTOM_PI</code> are replaced with <code>3.14159265358979323846</code> by the C pre-processor before the C code is then compiled. This is why no type information is given. Also, because this is done before compilation it is implicit that the value is constant.</p><p>When binding this to Vala the type information and that it is constant are made explicit:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CUSTOM_PI</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>An important point to note is the value is not bound, only the identifier. Vala will use the identifier in the generated C code and then the C pre-processor will replace it with the value before compilation.</p>',8)])])}const u=i(n,[["render",o]]);export{g as __pageData,u as default};
