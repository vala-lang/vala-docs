import{_ as i,c as t,o as a,ag as e}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"4.3. Simple Type Structs","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.md","lastUpdated":1759843583000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-03-simple-type-structs.md"};function p(l,s,d,h,r,k){return a(),t("div",null,[...s[0]||(s[0]=[e(`<h1 id="_4-3-simple-type-structs" tabindex="-1">4.3. Simple Type Structs <a class="header-anchor" href="#_4-3-simple-type-structs" aria-label="Permalink to &quot;4.3. Simple Type Structs&quot;">â€‹</a></h1><p>C libraries often define new types for numeric handles, sizes and offsets. To translate these to a VAPI file, just use the <code>SimpleType</code> attribute with a struct and inherit from the same simple type in the C header.</p><p>An example:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> people_inside;</span></span></code></pre></div><p>would be defined in the VAPI file as:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SimpleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cname = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;people_inside&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, has_type_id = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PeopleInside</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>When inheriting from an existing type, all the methods will be carried forward. For sizes and offsets, this is probably desirable; for handles, it is probably not. For example, a UNIX file descriptor is stored in an integer, but adding or multiplying two file handles has no sense. In this case, it is preferable not to inherit from a numeric type and add the attribute <code>IntegerType (rank=X)</code> so the Vala compiler can automatically cast a type into an integer of an appropriate size when needed (e.g., initialising from an integral constant).</p><p>An example from XCB:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> uint32_t</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> xcb_atom_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>would be defined in the VAPI file as:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SimpleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IntegerType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (rank = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cname =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xcb_atom_t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, has_type_id = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AtomT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The ranks for the common types, as defined in the <em>glib-2.0.vapi</em> and <em>posix.vapi</em> files, are:</p><table tabindex="0"><thead><tr><th><strong>Rank</strong></th><th><strong>Types in glib-2.0</strong></th><th><strong>Other Use</strong></th></tr></thead><tbody><tr><td>1</td><td>gint8<br>gfloat</td><td></td></tr><tr><td>2</td><td>gchar<br>gdouble</td><td></td></tr><tr><td>3</td><td>guchar<br>guint8</td><td>Posix.cc_t</td></tr><tr><td>4</td><td>gshort<br>gint16</td><td></td></tr><tr><td>5</td><td>gushort<br>guint16</td><td></td></tr><tr><td>6</td><td>gint<br>gint32</td><td>Posix.pid_t</td></tr><tr><td>7</td><td>guint<br>guint32<br>gunichar</td><td>Posix.speed_t<br>Posix.tcflag_t</td></tr><tr><td>8</td><td>glong<br>gssize<br>time_t</td><td>Posix.clock_t</td></tr><tr><td>9</td><td>gulong<br>gsize</td><td>Posix.nfds_t<br>Posix.key_t<br>Posix.fsblkcnt_t<br>Posix.fsfilcnt_t<br>Posix.off_t<br>Posix.uid_t<br>Posix.gid_t<br>Posix.mode_t<br>Posix.dev_t<br>Posix.ino_t<br>Posix.nlink_t<br>Posix.blksize_t<br>Posix.blkcnt_t</td></tr><tr><td>10</td><td>gint64</td><td></td></tr><tr><td>11</td><td>guint64</td><td></td></tr></tbody></table>`,13)])])}const c=i(n,[["render",p]]);export{g as __pageData,c as default};
