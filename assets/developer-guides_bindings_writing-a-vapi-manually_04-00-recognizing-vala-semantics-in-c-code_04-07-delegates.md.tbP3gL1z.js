import{_ as s,c as a,o as t,ag as e}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"4.7. Delegates","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.md","lastUpdated":1759534595000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/04-00-recognizing-vala-semantics-in-c-code/04-07-delegates.md"};function h(l,i,p,k,o,r){return t(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="_4-7-delegates" tabindex="-1">4.7. Delegates <a class="header-anchor" href="#_4-7-delegates" aria-label="Permalink to &quot;4.7. Delegates&quot;">â€‹</a></h1><p>C permits the definition of function pointers, which are pointers to code matching a certain signature that may be executed. The major problem with this is that it does not pass information from the caller, through the library, to the callback. In other languages, a closure is an encapsulation of code and state. C programmers sometimes emulate this behaviour by passing a void pointer of &quot;user data&quot; or &quot;context&quot; that acts as the state portion of the closure.</p><p>Vala supports both of these modes: a delegate may be targeted (i.e., a closure) or targetless (i.e., a function pointer). This is controlled by the has_target value, which defaults to true. The position of the target is assumed to be the last value in the argument list, which is typically where most C programs put it, though they occasionally place it first.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compute_func)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typedef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">analyze_func)(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">userdata);</span></span></code></pre></div><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cname = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;compute_func&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, has_target = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComputeFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cname = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;analyze_func&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnalyzeFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b);</span></span></code></pre></div><p>If the position of the context is not the last parameter, set the CCode attribute, <code>delegate_target_pos</code>, as per <a href="./../05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.html">Changing the Position of Parameters</a>.</p><p>It is common for C programmers not to create a <code>typedef</code> for a function pointer, instead opting to include it directly. Create a delegate and do not set the <code>cname</code>. If possible, contribute a patch to the library to create a <code>typedef</code>.</p>`,7)])])}const c=s(n,[["render",h]]);export{g as __pageData,c as default};
