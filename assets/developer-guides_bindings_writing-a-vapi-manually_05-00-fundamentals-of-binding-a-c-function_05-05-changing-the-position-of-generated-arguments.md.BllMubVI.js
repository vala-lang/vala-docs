import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"5.5. Changing the Position of Generated Arguments","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.md","lastUpdated":1760471362000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.md"};function o(h,s,l,p,r,d){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="_5-5-changing-the-position-of-generated-arguments" tabindex="-1">5.5. Changing the Position of Generated Arguments <a class="header-anchor" href="#_5-5-changing-the-position-of-generated-arguments" aria-label="Permalink to &quot;5.5. Changing the Position of Generated Arguments&quot;">â€‹</a></h1><p>The default behaviour of Vala is to keep the position of arguments in a Vala caller the same as the position of parameters in the C function callee. Where an argument is not explicit on the Vala side, for example instance data, Vala assumes it will be in a certain position. Instance data is assumed to be the first parameter of the C function, but this can be changed via the <code>instance_pos</code> CCode attribute to any position. The Vala position system is used for the instance position (<code>instance_pos</code>), array length position (<code>array_length_pos</code>), delegate target position (<code>delegate_target_pos</code>), and can even be used to reorder parameters (<code>pos</code>).</p><p>Vala&#39;s positioning system is a little confusing at first, so it bears explanation. Suppose we have a Vala function as follows:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> delegate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Transform</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The generated signature for <code>compute</code> will be:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo_compute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Foo </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo_transform </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">t_userdata</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array_len</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>I have marked the parameters that occur verbatim in Vala with their positions. From Vala&#39;s perspective, the position of self must be less than 1. Similarly, <code>t_userdata</code> must be greater than 2, and <code>array_len</code> must be greater than <code>t_userdata</code> for this ordering to make sense. Vala allows floating point values to describe this ordering. Once can think of <code>self</code> as having position 0, <code>t</code>&#39;s context as having position 2.1, and the returned array length as having position 2.2. This is just one possible set of values. It could also be 0.9, 2.5, 2.8, respectively, and produce the same result.</p><p>By default, Vala will set the instance to be 0, any array length to be the position of the array plus 0.1, any delegate&#39;s target to be the position of the delegate plus 0.1, any destructor for an owned delegate to be the position of the delegate plus 0.2.</p><p>If the order does not suit the C function, it is possible to reorder them using appropriate values, however you must keep the total order clean in your mind.</p>`,9)])])}const c=i(n,[["render",o]]);export{g as __pageData,c as default};
