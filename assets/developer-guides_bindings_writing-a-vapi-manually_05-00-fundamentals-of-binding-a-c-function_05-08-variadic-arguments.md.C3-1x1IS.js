import{_ as a,c as t,o as i,ag as n}from"./chunks/framework.B-XtCDNB.js";const f=JSON.parse('{"title":"5.8. Variadic Arguments (a.k.a. \\"...\\")","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-08-variadic-arguments.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-08-variadic-arguments.md","lastUpdated":1761243551000}'),o={name:"developer-guides/bindings/writing-a-vapi-manually/05-00-fundamentals-of-binding-a-c-function/05-08-variadic-arguments.md"};function r(s,e,d,l,c,u){return i(),t("div",null,[...e[0]||(e[0]=[n('<h1 id="_5-8-variadic-arguments-a-k-a" tabindex="-1">5.8. Variadic Arguments (a.k.a. &quot;...&quot;) <a class="header-anchor" href="#_5-8-variadic-arguments-a-k-a" aria-label="Permalink to &quot;5.8. Variadic Arguments (a.k.a. &quot;...&quot;)&quot;">â€‹</a></h1><p>C variadic argument system is treacherous and includes lots of potential ways to break. Vala, unfortunately, inherits them. Vala adds a few safeties, but also introduced some new problems.</p><p>One safety put in place is that if the method&#39;s <code>CCode</code> attribute includes <code>sentinel = &quot;X&quot;</code>, then X will always be appended as the last parameter. Since lists are often terminated by a special value, usually null, this can prevent variadic argument overruns.</p><p>Additionally, Vala can do type checking on <code>printf</code>-like and <code>scanf</code>-like function by adding the <code>PrintfFunction</code> or <code>ScanfFunction</code> attributes. However, if the format strings have been modified to include special values, these formatting tokens will not work as intended.</p><p>Return values that append to the end of a function, such as array length returns, and delegate contexts, will often interact badly with variadic arguments, since the Vala compiler will erroneously place the parameter after the &quot;...&quot; in the definition. When dealing with variadic functions, it is best to specify all positions explicitly.</p>',5)])])}const m=a(o,[["render",r]]);export{f as __pageData,m as default};
