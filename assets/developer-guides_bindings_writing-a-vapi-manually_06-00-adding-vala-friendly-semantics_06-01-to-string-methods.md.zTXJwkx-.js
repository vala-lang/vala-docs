import{_ as i,c as n,o as s,j as e,a as t}from"./chunks/framework.B-XtCDNB.js";const p=JSON.parse('{"title":"6.1. to_string () Methods","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-01-to-string-methods.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-01-to-string-methods.md","lastUpdated":1760471362000}'),d={name:"developer-guides/bindings/writing-a-vapi-manually/06-00-adding-vala-friendly-semantics/06-01-to-string-methods.md"};function o(r,a,l,g,m,h){return s(),n("div",null,[...a[0]||(a[0]=[e("h1",{id:"_6-1-to-string-methods",tabindex:"-1"},[t("6.1. to_string () Methods "),e("a",{class:"header-anchor",href:"#_6-1-to-string-methods","aria-label":'Permalink to "6.1. to_string () Methods"'},"â€‹")],-1),e("p",null,[t("Binding a method as "),e("code",null,"to_string ()"),t(" will allow the method to be used in a Vala string template without needing to write the method identifier in the Vala source code.")],-1)])])}const u=i(d,[["render",o]]);export{p as __pageData,u as default};
