import{_ as e,c as s,o as t,ag as i}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"7.3. Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-03-arrays.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-03-arrays.md","lastUpdated":1760471362000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-03-arrays.md"};function r(h,a,l,o,d,p){return t(),s("div",null,[...a[0]||(a[0]=[i(`<h1 id="_7-3-arrays" tabindex="-1">7.3. Arrays <a class="header-anchor" href="#_7-3-arrays" aria-label="Permalink to &quot;7.3. Arrays&quot;">​</a></h1><p>Vala arrays are designed to match most of the C array semantics. Since C arrays, generally, have no explicit length, Vala needs special hints to know what to do. There are several cases for the length of an array, discussed below. For a parameter, a <code>CCode</code> attribute attached to that parameter controls the array&#39;s binding. For a return value, the <code>CCode</code> attribute <strong>of the method</strong> controls the array&#39;s binding.</p><h2 id="_7-3-1-array-length-is-passed-as-an-argument" tabindex="-1">7.3.1. Array Length is Passed as an Argument <a class="header-anchor" href="#_7-3-1-array-length-is-passed-as-an-argument" aria-label="Permalink to &quot;7.3.1. Array Length is Passed as an Argument&quot;">​</a></h2><p>By default, Vala assumes the first case and does the following transformation:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] array);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f);</span></span></code></pre></div><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> array_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">float</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array_length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>If the C code does this, there are still two potential mismatches: the order of parameters and the type of the array length. Often, the array length is a <code>size_t</code> or <code>unsigned int</code>. The <code>array_length_pos</code> can move the position of the array&#39;s length parameter, see <a href="./../05-00-fundamentals-of-binding-a-c-function/05-05-changing-the-position-of-generated-arguments.html">Changing the Position of Parameters</a>. The <code>array_length_type</code> specifies a string with the C type of the array (e.g., <code>size_t</code>).</p><h2 id="_7-3-2-array-is-null-terminated" tabindex="-1">7.3.2. Array is Null-Terminated <a class="header-anchor" href="#_7-3-2-array-is-null-terminated" aria-label="Permalink to &quot;7.3.2. Array is Null-Terminated&quot;">​</a></h2><p>The <code>array_null_terminated</code> will assume the array is null terminated, like a string is, and set the array length automatically by iterating over the items in the array. Since Vala always allocates padding in arrays with the final element as null, passing a Vala-declared array in does not involve modifying the array in any way.</p><h2 id="_7-3-3-array-length-is-a-constant-expression" tabindex="-1">7.3.3. Array Length is a Constant Expression <a class="header-anchor" href="#_7-3-3-array-length-is-a-constant-expression" aria-label="Permalink to &quot;7.3.3. Array Length is a Constant Expression&quot;">​</a></h2><p>The <code>array_length_cexpr</code> can be set to the C expression that populates the array&#39;s value. It does not have access to the array, the instance of the object being called, or any other context. It must be a context-free expression.</p><h2 id="_7-3-4-array-length-is-unknown" tabindex="-1">7.3.4. Array Length is Unknown <a class="header-anchor" href="#_7-3-4-array-length-is-unknown" aria-label="Permalink to &quot;7.3.4. Array Length is Unknown&quot;">​</a></h2><p>If the array length is unknown, setting <code>array_length = false</code> in the <code>CCode</code> attribute will cause Vala to set the array&#39;s <code>.length</code> property to -1 and not pass the length when used as a parameter.</p><h2 id="_7-3-5-array-length-is-known-by-some-awkward-means" tabindex="-1">7.3.5. Array Length is Known by Some Awkward Means <a class="header-anchor" href="#_7-3-5-array-length-is-known-by-some-awkward-means" aria-label="Permalink to &quot;7.3.5. Array Length is Known by Some Awkward Means&quot;">​</a></h2><p>This is only applicable for arrays being returned. If the array&#39;s length can be determined, but non-trivially, a wrapper function can be included that sets the array&#39;s <code>.length property</code> to the correct value. See <a href="./../10-00-awkward-situations/10-01-array-lengths.html">Array Lengths</a>.</p>`,15)])])}const g=e(n,[["render",r]]);export{k as __pageData,g as default};
