import{_ as a,c as t,o as n,ag as r}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"7.4. Strings and Buffers","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-04-strings-and-buffers.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-04-strings-and-buffers.md","lastUpdated":1759843583000}'),i={name:"developer-guides/bindings/writing-a-vapi-manually/07-00-binding-a-c-function-s-parameter-and-return-types/07-04-strings-and-buffers.md"};function s(d,e,o,l,u,f){return n(),t("div",null,[...e[0]||(e[0]=[r('<h1 id="_7-4-strings-and-buffers" tabindex="-1">7.4. Strings and Buffers <a class="header-anchor" href="#_7-4-strings-and-buffers" aria-label="Permalink to &quot;7.4. Strings and Buffers&quot;">â€‹</a></h1><p>In C, strings and buffers are generally treated like arrays, but Vala may require slightly more finesse. In Vala, a string is a null-terminated list of UTF-8 data that is immutable. If the use case is anything but that, an array of <code>uint8</code> is the preferred way of dealing with that data.</p><p>Frequently, functions take a buffer, fill it with a string and then return the buffer or null (e.g., <code>realpath</code>(3)). The buffer should be a <code>uint8[]</code> and the return value an <code>unowned string?</code>, typically.</p><p>Again, check thoroughly for the ownership of strings being returned. Frequently, the caller does not free the string, especially if it is marked <code>const</code>.</p>',4)])])}const p=a(i,[["render",s]]);export{g as __pageData,p as default};
