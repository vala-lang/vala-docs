import{_ as s,c as e,o as i,ag as a}from"./chunks/framework.B-XtCDNB.js";const f=JSON.parse(`{"title":"8. Binding a C Struct's Fields","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields.md","lastUpdated":1759843583000}`),n={name:"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields.md"};function r(o,t,c,d,l,u){return i(),e("div",null,[...t[0]||(t[0]=[a('<h1 id="_8-binding-a-c-struct-s-fields" tabindex="-1">8. Binding a C Struct&#39;s Fields <a class="header-anchor" href="#_8-binding-a-c-struct-s-fields" aria-label="Permalink to &quot;8. Binding a C Struct&#39;s Fields&quot;">​</a></h1><p>Compact classes, structs, and simple-type structs may have fields. Often, classes will be opaque; that is, there will be no information about the contents of the class. If so, skip this section. When binding fields, first check that there are no getter/setter functions of the same names (see <a href="./06-00-adding-vala-friendly-semantics/06-02-properties.html">Properties</a>). Often times, the details of the structure are in the header, but not intended for public consumption; avoid binding variables that should not be accessed. Consult the documentation.</p><h4 id="_8-1-structs" tabindex="-1"><a href="./08-00-binding-a-c-struct-s-fields/08-01-structs.html">8.1. Structs</a> <a class="header-anchor" href="#_8-1-structs" aria-label="Permalink to &quot;[8.1. Structs](08-00-binding-a-c-struct-s-fields/08-01-structs)&quot;">​</a></h4><h4 id="_8-2-pointers-to-structs" tabindex="-1"><a href="./08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.html">8.2. Pointers to Structs</a> <a class="header-anchor" href="#_8-2-pointers-to-structs" aria-label="Permalink to &quot;[8.2. Pointers to Structs](08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs)&quot;">​</a></h4><h4 id="_8-3-arrays" tabindex="-1"><a href="./08-00-binding-a-c-struct-s-fields/08-03-arrays.html">8.3. Arrays</a> <a class="header-anchor" href="#_8-3-arrays" aria-label="Permalink to &quot;[8.3. Arrays](08-00-binding-a-c-struct-s-fields/08-03-arrays)&quot;">​</a></h4><h4 id="_8-4-function-pointers" tabindex="-1"><a href="./08-00-binding-a-c-struct-s-fields/08-04-function-pointers.html">8.4. Function Pointers</a> <a class="header-anchor" href="#_8-4-function-pointers" aria-label="Permalink to &quot;[8.4. Function Pointers](08-00-binding-a-c-struct-s-fields/08-04-function-pointers)&quot;">​</a></h4><h4 id="_8-5-unions" tabindex="-1"><a href="./08-00-binding-a-c-struct-s-fields/08-05-unions.html">8.5. Unions</a> <a class="header-anchor" href="#_8-5-unions" aria-label="Permalink to &quot;[8.5. Unions](08-00-binding-a-c-struct-s-fields/08-05-unions)&quot;">​</a></h4>',7)])])}const b=s(n,[["render",r]]);export{f as __pageData,b as default};
