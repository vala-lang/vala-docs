import{_ as e,c as t,o as i,ag as a}from"./chunks/framework.B-XtCDNB.js";const u=JSON.parse('{"title":"8.2. Pointers to Structs","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.md","lastUpdated":1759713030000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/08-00-binding-a-c-struct-s-fields/08-02-pointers-to-structs.md"};function l(o,s,p,r,d,h){return i(),t("div",null,[...s[0]||(s[0]=[a('<h1 id="_8-2-pointers-to-structs" tabindex="-1">8.2. Pointers to Structs <a class="header-anchor" href="#_8-2-pointers-to-structs" aria-label="Permalink to &quot;8.2. Pointers to Structs&quot;">â€‹</a></h1><p>Any field referenced as a pointer is slightly more complex.</p><p>If the type is a parented struct or the field is possibly null, suffix the type with a question mark.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">myfoo;</span></span></code></pre></div><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo? myfoo;</span></span></code></pre></div><p>The next question is: is the reference owned? If the value was overwritten, should the destructor be called? If the answer is no, then prefix with <code>unowned</code>. This is often the case for a tree structure that has parent pointers.</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foo_t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">parent;</span></span></code></pre></div><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> unowned</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> parent;</span></span></code></pre></div><p>If unowned is missing, a double-free event will occur when the field is overwritten. If it is included when not needed, there will be a memory leak.</p>',9)])])}const k=e(n,[["render",l]]);export{u as __pageData,k as default};
