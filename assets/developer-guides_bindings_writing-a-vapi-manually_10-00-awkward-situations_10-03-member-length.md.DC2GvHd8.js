import{_ as s,c as a,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const o=JSON.parse('{"title":"10.3. Member Length","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-03-member-length.md","filePath":"developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-03-member-length.md","lastUpdated":1759713030000}'),n={name:"developer-guides/bindings/writing-a-vapi-manually/10-00-awkward-situations/10-03-member-length.md"};function h(l,i,p,k,d,r){return e(),a("div",null,[...i[0]||(i[0]=[t('<h1 id="_10-3-member-length" tabindex="-1">10.3. Member Length <a class="header-anchor" href="#_10-3-member-length" aria-label="Permalink to &quot;10.3. Member Length&quot;">â€‹</a></h1><p>When dealing with raw-ish memory access, there is a common pattern to have:</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> nmemb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>in these cases, it is generally best to simply fix the type of data to <code>uint8</code> and use the right size as a default parameter:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CCode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (array_length_pos = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">uint8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] data, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">size_t</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> size = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>',5)])])}const E=s(n,[["render",h]]);export{o as __pageData,E as default};
