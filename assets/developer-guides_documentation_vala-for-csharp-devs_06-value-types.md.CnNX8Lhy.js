import{_ as d,c as o,o as a,ag as t}from"./chunks/framework.B-XtCDNB.js";const _=JSON.parse('{"title":"Value Types","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/documentation/vala-for-csharp-devs/06-value-types.md","filePath":"developer-guides/documentation/vala-for-csharp-devs/06-value-types.md","lastUpdated":1759843583000}'),c={name:"developer-guides/documentation/vala-for-csharp-devs/06-value-types.md"};function i(s,e,n,l,r,u){return a(),o("div",null,[...e[0]||(e[0]=[t('<h1 id="value-types" tabindex="-1">Value Types <a class="header-anchor" href="#value-types" aria-label="Permalink to &quot;Value Types&quot;">â€‹</a></h1><ul><li>sizes of standard types (<code>int</code>, <code>long</code>, ...) are architecture dependent</li><li>additional Vala types <code>int8</code>, <code>int16</code>, <code>int32</code>, <code>int64</code> (signed), <code>uint8</code>, <code>uint16</code>, <code>uint32</code>, <code>uint64</code> (unsigned) with architecture independent guaranteed sizes</li><li>no <code>byte</code>, <code>sbyte</code> (use <code>uint8</code>, <code>int8</code> instead)</li><li>no <code>decimal</code></li><li>C# <code>char</code> is UCS-2, not Vala&#39;s <code>char</code>, but similar to Vala&#39;s UCS-4 <code>unichar</code></li></ul>',2)])])}const h=d(c,[["render",i]]);export{_ as __pageData,h as default};
