import{_ as a,c as e,o as i,ag as l}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"Nullable Types","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/documentation/vala-for-csharp-devs/19-nullable-types.md","filePath":"developer-guides/documentation/vala-for-csharp-devs/19-nullable-types.md","lastUpdated":1760471362000}'),t={name:"developer-guides/documentation/vala-for-csharp-devs/19-nullable-types.md"};function n(p,s,h,d,o,r){return i(),e("div",null,[...s[0]||(s[0]=[l(`<h1 id="nullable-types" tabindex="-1">Nullable Types <a class="header-anchor" href="#nullable-types" aria-label="Permalink to &quot;Nullable Types&quot;">â€‹</a></h1><p>C#: mark nullable value types</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Vala: mark nullable reference type arguments and return values of methods. They are non-nullable by default!</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? foo, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>In this example: <code>foo</code> and return value may be <code>null</code>, <code>bar</code> must be non-null. Checked at run-time, and to some extent at compile time.</p><p>Conclusion: same syntax (<code>?</code> type modifier), different meanings.</p>`,7)])])}const u=a(t,[["render",n]]);export{c as __pageData,u as default};
