import{_ as e,c as o,o as d,ag as a}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"Collections","description":"","frontmatter":{},"headers":[],"relativePath":"developer-guides/documentation/vala-for-csharp-devs/33-collections.md","filePath":"developer-guides/documentation/vala-for-csharp-devs/33-collections.md","lastUpdated":1760471362000}'),r={name:"developer-guides/documentation/vala-for-csharp-devs/33-collections.md"};function s(i,t,c,n,l,p){return d(),o("div",null,[...t[0]||(t[0]=[a('<h1 id="collections" tabindex="-1">Collections <a class="header-anchor" href="#collections" aria-label="Permalink to &quot;Collections&quot;">â€‹</a></h1><p>C#: <code>System.Collections.Generic</code> namespace</p><p>Vala: <code>Gee</code> namespace, <code>--pkg gee-1.0</code>, <a href="https://wiki.gnome.org/Projects/Libgee" target="_blank" rel="noreferrer">Libgee</a></p><p>Rough equivalents:</p><p><em>Classes</em>:</p><table tabindex="0"><thead><tr><th>System.Collections.Generic</th><th>Gee</th></tr></thead><tbody><tr><td>Dictionary</td><td>HashMap</td></tr><tr><td>HashSet</td><td>HashSet</td></tr><tr><td>LinkedList</td><td>LinkedList</td></tr><tr><td>List</td><td>ArrayList</td></tr><tr><td>Queue</td><td>LinkedList, PriorityQueue</td></tr><tr><td>SortedDictionary</td><td>TreeMap</td></tr><tr><td>Stack</td><td>LinkedList</td></tr></tbody></table><p><em>Interfaces</em>:</p><table tabindex="0"><thead><tr><th>System.Collections.Generic</th><th>Gee</th></tr></thead><tbody><tr><td>ICollection</td><td>Collection</td></tr><tr><td>IComparer</td><td>Comparable</td></tr><tr><td>IDictionary</td><td>Map</td></tr><tr><td>IEnumerable</td><td>Iterable</td></tr><tr><td>IEnumerator</td><td>Iterator</td></tr><tr><td>IList</td><td>List, Queue, Deque</td></tr></tbody></table><p>See <a href="./../../gee-samples.html">Gee Examples</a></p><p>You can access and assign Gee collection items via indexers (e.g. <code>my_map[key]</code> is equivalent to <code>my_map.get (key)</code>). Vala supports an <code>in</code> operator for collections: <code>x in my_collection</code> is equivalent to <code>my_collection.contains (x)</code>. This operator also works with strings, even though strings are not collections.</p><p>Please note that Libgee checks for errors like the bounds for the index key with an <code>assert</code>, and so it won&#39;t raise any catchable <code>SystemException</code> like in C#.</p>',11)])])}const u=e(r,[["render",s]]);export{m as __pageData,u as default};
