import{_ as s,c as i,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const n="/assets/vala-structs-classes.D9q9TOU2.png",g=JSON.parse('{"title":"Vala FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"faq.md","filePath":"faq.md","lastUpdated":1760471362000}'),o={name:"faq.md"};function l(h,a,r,p,d,c){return e(),i("div",null,[...a[0]||(a[0]=[t(`<h1 id="vala-faq" tabindex="-1">Vala FAQ <a class="header-anchor" href="#vala-faq" aria-label="Permalink to &quot;Vala FAQ&quot;">​</a></h1><h2 id="why-have-you-created-a-whole-new-programming-language-why-didn-t-you-just-use-c-c-d-java-python" tabindex="-1">Why have you created a whole new programming language? Why didn&#39;t you just use C++, C#, D, Java, Python,...? <a class="header-anchor" href="#why-have-you-created-a-whole-new-programming-language-why-didn-t-you-just-use-c-c-d-java-python" aria-label="Permalink to &quot;Why have you created a whole new programming language? Why didn&#39;t you just use C++, C#, D, Java, Python,...?&quot;">​</a></h2><p>The type system of GObject doesn&#39;t fit perfectly well with the type system of any existing programming language. Vala is designed for GObject, this makes it easy to develop GObject-based libraries with Vala that can be used from a variety of other languages and runtime environments just like all the other GObject-based libraries out there. Just like Qt&#39;s Meta Object is an extension to C++ to provide signals, slots, and object properties, Vala is a modification of C# to better match the GObject type system. We want to use the same syntax as C# wherever it makes sense to keep the entry barrier low.</p><h2 id="how-can-i-use-vala-libraries-from-c-c-c-d-java-python" tabindex="-1">How can I use Vala libraries from C, C++, C#, D, Java, Python,...? <a class="header-anchor" href="#how-can-i-use-vala-libraries-from-c-c-c-d-java-python" aria-label="Permalink to &quot;How can I use Vala libraries from C, C++, C#, D, Java, Python,...?&quot;">​</a></h2><p>You can always use Vala libraries just like they were GObject/C libraries, they provide C header files and use GObject for all classes. In contrast to C, Vala generates <a href="https://gi.readthedocs.io/en/latest/index.html" target="_blank" rel="noreferrer">GObjectIntrospection</a> metadata for you so you do not need to care about binding your libraries to any language for which gobject-introspection <a href="https://wiki.gnome.org/action/show/Projects/GObjectIntrospection/Users" target="_blank" rel="noreferrer">support exists</a>.</p><h2 id="how-does-the-performance-of-vala-applications-compare-to-other-applications" tabindex="-1">How does the performance of Vala applications compare to other applications? <a class="header-anchor" href="#how-does-the-performance-of-vala-applications-compare-to-other-applications" aria-label="Permalink to &quot;How does the performance of Vala applications compare to other applications?&quot;">​</a></h2><p>The performance should be pretty similar to GObject/C-based code as there is no Vala-specific runtime library/environment that needs to be loaded. The C compiler can also apply the same optimizations on Vala-generated C code and plain GObject/C code. The Vala compiler uses reference counting in more places than most GObject/C-based applications do. However, Vala allows to fine-tune that easily in performance-critical sections with the <code>weak</code> modifier.</p><h2 id="vala-is-quite-similar-to-c-do-you-plan-to-replace-mono" tabindex="-1">Vala is quite similar to C#. Do you plan to replace Mono? <a class="header-anchor" href="#vala-is-quite-similar-to-c-do-you-plan-to-replace-mono" aria-label="Permalink to &quot;Vala is quite similar to C#. Do you plan to replace Mono?&quot;">​</a></h2><p>Vala wants to be a convenient tool for creating libraries which can be consumed by any programming language supported by the GNOME platform - including Mono. Vala tries to integrate, not to separate.</p><h2 id="what-does-string-foo-mean" tabindex="-1">What does &quot;string? foo&quot; mean? <a class="header-anchor" href="#what-does-string-foo-mean" aria-label="Permalink to &quot;What does &quot;string? foo&quot; mean?&quot;">​</a></h2><p>The ?-modifier tells the vala compiler that a passed or returned value may be <code>null</code>.</p><h2 id="can-i-use-keywords-as-identifiers" tabindex="-1">Can I use keywords as identifiers? <a class="header-anchor" href="#can-i-use-keywords-as-identifiers" aria-label="Permalink to &quot;Can I use keywords as identifiers?&quot;">​</a></h2><p>Yes, if you prepend the identifier with an <code>@</code>.</p><h2 id="why-do-i-have-to-inherit-from-gobject" tabindex="-1">Why do I have to inherit from GObject? <a class="header-anchor" href="#why-do-i-have-to-inherit-from-gobject" aria-label="Permalink to &quot;Why do I have to inherit from GObject?&quot;">​</a></h2><p>Since Vala is based on GObject it&#39;s needed to inherit almost every class from GObject. However, it&#39;s not mandatory, but if you don&#39;t inherit, you will only get a very restricted class. Unless you know what you&#39;re doing you want to inherit from GObject. The ../BasicSample shows how to achieve a full-featured class.</p><h2 id="can-i-use-pointer-arithmetic-inside-strings" tabindex="-1">Can I use pointer arithmetic inside strings? <a class="header-anchor" href="#can-i-use-pointer-arithmetic-inside-strings" aria-label="Permalink to &quot;Can I use pointer arithmetic inside strings?&quot;">​</a></h2><p>If I write this, I get an error:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;baer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%sn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, a);</span></span></code></pre></div><p>A vala string is a <code>char*</code> if I look at the C version. Why isn&#39;t it allowed, and what is the solution?</p><p>One reason why it&#39;s not allowed is that Vala strings are encoded in UTF-8, which uses a variable number of bytes per character. This means that replacing a single character as in your example might require resizing the string, which we don&#39;t want to happen implicitly.</p><p>There are two possibilities how to modify strings in Vala. The recommended way is to use the GLib.!StringBuilder class, which is a binding for GString. The other possibility is to use raw pointers just like in C, however, you have to care about encoding and memory management yourself, then.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* str_ptr = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">64</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str_ptr[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;e&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str = (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) str_ptr;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str_ptr;</span></span></code></pre></div><p>(<a href="http://mail.gnome.org/archives/vala-list/2008-April/msg00058.html" target="_blank" rel="noreferrer">source</a>)</p><h2 id="how-to-test-if-an-object-is-some-class-or-subclass" tabindex="-1">How to test if an object is some class or subclass? <a class="header-anchor" href="#how-to-test-if-an-object-is-some-class-or-subclass" aria-label="Permalink to &quot;How to test if an object is some class or subclass?&quot;">​</a></h2><p>Use the &quot;<code>is</code>&quot; operator.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wi = </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (wi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Widget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is a Widget.n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (wi </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Is a Button.n&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Works with interfaces too.</p><h2 id="how-to-force-cast-an-object-from-one-type-to-another-type" tabindex="-1">How to force cast an object from one type to another type? <a class="header-anchor" href="#how-to-force-cast-an-object-from-one-type-to-another-type" aria-label="Permalink to &quot;How to force cast an object from one type to another type?&quot;">​</a></h2><p>Use &quot;<code>(Klass) object</code>&quot;.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> btn1 = (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) awidget;</span></span></code></pre></div><h2 id="does-vala-have-a-preprocessor" tabindex="-1">Does Vala have a preprocessor? <a class="header-anchor" href="#does-vala-have-a-preprocessor" aria-label="Permalink to &quot;Does Vala have a preprocessor?&quot;">​</a></h2><p>Starting with version 0.7.0, Vala supports the preprocessing directives <code>#if</code>, <code>#elif</code>, <code>#else</code>, and <code>#endif</code>. The supported operators for conditionals are <code>==</code>, <code>!</code>, <code>&amp;&amp;</code> and <code>||</code>. There is no intention to ever support macros as found in the C preprocessor.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] args) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> COND</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COND IS DEFINED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#else</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  message</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;COND IS NOT DEFINED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#endif</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You must add <code>-D COND</code> to the valac command line to enable conditional compilation for the above example.</p><p>For more details see <a href="https://gnome.pages.gitlab.gnome.org/vala/manual/preprocessor.html" target="_blank" rel="noreferrer">Preprocessor - Vala Reference Manual</a>.</p><h2 id="what-does-simpletype-and-compact-in-bindings-mean" tabindex="-1">What does [SimpleType] and [Compact] in bindings mean? <a class="header-anchor" href="#what-does-simpletype-and-compact-in-bindings-mean" aria-label="Permalink to &quot;What does [SimpleType] and [Compact] in bindings mean?&quot;">​</a></h2><p>Have a look at this graphic:</p><p><img src="`+n+`" alt="Vala SimpleType and Compact explanation diagram"></p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Structs are always shallow copied before they are passed to C functions. The difference with <code>[SimpleType]</code> is only at the C implementation, semantics in Vala don&#39;t change. This might not be very clear in the image above.</p></div><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>Only GObject classes have gobject properties (introspectable at runtime). This feature is not emphasized in the above image.</p></div><h2 id="how-do-i-read-from-stdin" tabindex="-1">How do I read from stdin? <a class="header-anchor" href="#how-do-i-read-from-stdin" aria-label="Permalink to &quot;How do I read from stdin?&quot;">​</a></h2><p>Allocating space for strings to be read in can be tricky. See <a href="https://wiki.gnome.org/Projects/Vala/InputSamples" target="_blank" rel="noreferrer">Input Samples</a> for an example.</p><h2 id="how-do-i-get-the-gtype-for-something" tabindex="-1">How do I get the GType for something? <a class="header-anchor" href="#how-do-i-get-the-gtype-for-something" aria-label="Permalink to &quot;How do I get the GType for something?&quot;">​</a></h2><p>Try the <code>typeof</code> operator. Fx <code>typeof(string)</code> is a <code>G_TYPE_STRING</code>.</p><h2 id="why-do-static-members-not-get-initialized" tabindex="-1">Why do static members not get initialized? <a class="header-anchor" href="#why-do-static-members-not-get-initialized" aria-label="Permalink to &quot;Why do static members not get initialized?&quot;">​</a></h2><p>There&#39;s currently <a href="http://bugzilla.gnome.org/show_bug.cgi?id=543189" target="_blank" rel="noreferrer">a bug</a> about that. Unfortunately, due to C limitations and a missing coherent design for that, it&#39;s hard to implement.</p><p>You can work around this with a dummy instantiation before first access to a static class member:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Statico</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> test_value;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> construct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        test_value = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Statico</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ();   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// dummy instantiation</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%dn&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Statico</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.test_value);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="why-can-t-i-chain-up-to-base-constructor" tabindex="-1">Why can&#39;t I chain up to base constructor? <a class="header-anchor" href="#why-can-t-i-chain-up-to-base-constructor" aria-label="Permalink to &quot;Why can&#39;t I chain up to base constructor?&quot;">​</a></h2><p>Often external libraries do not offer functionality for <code>base()</code> usage. Therefore you have to use GObject-based construction using <code>Object(prop1: value1, ...)</code>. As an example:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// https://wiki.gnome.org/Projects/Vala/InputSamples</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Window</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (type: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Gtk</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WindowType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TOPLEVEL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="how-do-i-convert-from-uint8-or-char-to-string-and-viceversa" tabindex="-1">How do I convert from uint8[] (or char[]) to string and viceversa? <a class="header-anchor" href="#how-do-i-convert-from-uint8-or-char-to-string-and-viceversa" aria-label="Permalink to &quot;How do I convert from uint8[] (or char[]) to string and viceversa?&quot;">​</a></h2><p>From uint8[] (or what else) to string it&#39;s as simple as casting to string: <code>(string) array</code>. From string to uint8[] array it&#39;s about accessing the data member: <code>yourstr.data</code>.</p><p>If the uint8[] array doesn&#39;t have a terminating 0 byte at the end, you must append one before converting to a string. Note that <code>yourstr.data</code> will give you an array without the terminating 0 byte, so <code>(string) yourstr.data == yourstr</code> is incorrect.</p><h2 id="how-do-i-create-an-array-of-structs" tabindex="-1">How do I create an array of structs? <a class="header-anchor" href="#how-do-i-create-an-array-of-structs" aria-label="Permalink to &quot;How do I create an array of structs?&quot;">​</a></h2><p>First of all, take a look to the ways structs can be created at <a href="./tutorials/programming-language/main/02-00-basics/02-07-language-elements.html#_2-7-5-structs">Structs</a>.</p><p>If the array is constant:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] s = { { value1, value2, ... }, ...};</span></span></code></pre></div><p>Otherwise:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] s = { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() { field1=value1, field2=value2, ... }, ...};</span></span></code></pre></div><p>Alternatively, if you are the author of YourStruct (that is not external) you can provide a constructor to simplify the above expression:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field1, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field2, ...) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.field1 = field1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.field2 = field2;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Then you can create the array like this:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] s = { </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">YourStruct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (field1, field2, ...), ...};</span></span></code></pre></div><h2 id="how-do-i-pass-user-data-for-a-callback" tabindex="-1">How do I pass user data for a callback? <a class="header-anchor" href="#how-do-i-pass-user-data-for-a-callback" aria-label="Permalink to &quot;How do I pass user data for a callback?&quot;">​</a></h2><p>Vala automatically passes user data to callbacks depending on the context. There are mainly two techniques for passing a callback. The first is by passing an instance method:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (some_instance.some_method);</span></span></code></pre></div><p>In this case Vala will automatically pass some_instance as user data, so that when some_method is called &quot;this&quot; exists in the method scope.</p><p>The other way to provide custom user data is to use closures:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some_var = ...;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">the_method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (() =&gt; { use some_var });</span></span></code></pre></div><p>Vala automatically creates the user data with all the variables captured by the closure, so that they exist at the time when the callback is called.</p><h2 id="i-have-a-config-vapi-binding-for-config-h-but-it-is-not-the-first-file-included" tabindex="-1">I have a config.vapi binding for config.h, but it is not the first file included <a class="header-anchor" href="#i-have-a-config-vapi-binding-for-config-h-but-it-is-not-the-first-file-included" aria-label="Permalink to &quot;I have a config.vapi binding for config.h, but it is not the first file included&quot;">​</a></h2><p>Vala doesn&#39;t know that your binding should be included first. However, you can tell your C compiler to include arbitrary files first by using <code>-include config.h</code> argument. With vala, you could use <code>vala -X -include config.h</code> to pass this argument to the C compiler.</p><h2 id="how-can-i-fix-cc-warnings" tabindex="-1">How can I fix CC warnings? <a class="header-anchor" href="#how-can-i-fix-cc-warnings" aria-label="Permalink to &quot;How can I fix CC warnings?&quot;">​</a></h2><p>Unfortunately you can&#39;t usually, and you can ignore CC warnings safely most of the time. You only want to look for Vala warnings usually.</p><h2 id="why-don-t-you-use-typelib-instead-of-gir" tabindex="-1">Why don&#39;t you use .typelib instead of .gir? <a class="header-anchor" href="#why-don-t-you-use-typelib-instead-of-gir" aria-label="Permalink to &quot;Why don&#39;t you use .typelib instead of .gir?&quot;">​</a></h2><p>Because the .gir file contains some information that gets stripped in .typelib files.</p><div class="info custom-block"><p class="custom-block-title">TODO</p><p>list some of these</p></div><h2 id="why-should-i-use-vapi-instead-of-gir-with-pkg" tabindex="-1">Why should I use .vapi instead of .gir with --pkg? <a class="header-anchor" href="#why-should-i-use-vapi-instead-of-gir-with-pkg" aria-label="Permalink to &quot;Why should I use .vapi instead of .gir with --pkg?&quot;">​</a></h2><p>The .gir files are produced by libraries, while the .vapi are produced with <code>vapigen</code> using the .gir plus metadata files. These are the reasons why vala developers highly suggest using the .vapi instead of the .gir:</p><ol><li>Parsing .gir files is way slower because the gir parser is not much optimized. The .vapi representation is vala code thus it doesn&#39;t need particular processing compared to the .gir. Remember that .gir is a different language that needs to be transformed into vala.</li><li>Parsing a .gir file does also involve parsing the dependant .gir files, which means having the necessary metadata for all the .gir files, which neither vala nor libraries distribute (not yet).</li><li>With a .vapi file you have a human readable representation of how vapigen interprets the .gir file plus metadata. So it serves as documentation for yourself, instead of going wild guessing the name of the symbols or whatelse.</li><li>You can easily compare two .vapi files for differences because a symbol is usually defined on one line, while with .gir a single symbol is defined on multiple lines.</li><li>A .gir file is heavy weight whereas the .vapi file is very light weight, which means it&#39;s suitable for being copied locally in your project. For example, Gtk-3.0.gir is 5 MB while gkt+-3.0.vapi is 0.4 MB.</li></ol><h2 id="is-having-a-local-copy-of-a-vapi-in-my-project-good-practice" tabindex="-1">Is having a local copy of a .vapi in my project good practice? <a class="header-anchor" href="#is-having-a-local-copy-of-a-vapi-in-my-project-good-practice" aria-label="Permalink to &quot;Is having a local copy of a .vapi in my project good practice?&quot;">​</a></h2><p>It isn&#39;t inherently good or bad. There are some advantages, disadvantages, and trade-offs to having a local copy of the VAPI embedded in your codebase. The issue is quite similar to the question of whether to include a copy of libraries you depend on in your code tree, or link to a system-wide version.</p><p>Perhaps the most significant advantage is that it is possible that the &quot;upgraded&quot; bindings will include a backwards-incompatible change which can break your project. Such changes were common when Vala was younger but these days such changes are exceedingly rare, particularly for bindings distributed with Vala or generated from GObject Introspection repositories.</p><p>Probably the biggest disadvantage is that you will not automatically benefit from backwards-compatible fixes and improvements that happen in bindings over time. It is quite common for updated bindings to fix bugs (most prominently memory leaks), and if you use a local copy of the binding you will not benefit from such changes until you update the copy of the bindings your software uses.</p><p>Of course, sometimes it isn&#39;t really feasible to depend on the system-wide binding because there isn&#39;t one installed. While we generally prefer for Vala bindings to be distributed with the project they bind, or with Vala itself for some popular libraries, third-party bindings generally aren&#39;t installed system-wide and including a local copy is considered the preferred method of use. For example, the <a href="https://gitlab.gnome.org/GNOME/vala-extra-vapis" target="_blank" rel="noreferrer">vala-extra-vapis</a> repository (which contains many third-party bindings) is intended to be usable as a git submodule or subtree.</p><p>One more thing to consider is that using a local copy of bindings can make <a href="https://valadoc.org" target="_blank" rel="noreferrer">https://valadoc.org</a> less useful. Typically, valadoc.org content tracks the latest stable version, if you&#39;re using a current Linux distribution, is likely the same version you have on your system. If you make a local copy of the bindings you use they will often be older versions which don&#39;t match what <a href="https://valadoc.org" target="_blank" rel="noreferrer">valadoc.org</a> says.</p>`,87)])])}const u=s(o,[["render",l]]);export{g as __pageData,u as default};
