import{_ as e,c as i,o as s,ag as t}from"./chunks/framework.B-XtCDNB.js";const u=JSON.parse('{"title":"2.1. Source Files and Compilation","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.md","filePath":"tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.md","lastUpdated":1759843583000}'),o={name:"tutorials/programming-language/main/02-00-basics/02-01-source-files-and-compilation.md"};function l(n,a,c,r,h,p){return s(),i("div",null,[...a[0]||(a[0]=[t(`<h1 id="_2-1-source-files-and-compilation" tabindex="-1">2.1. Source Files and Compilation <a class="header-anchor" href="#_2-1-source-files-and-compilation" aria-label="Permalink to &quot;2.1. Source Files and Compilation&quot;">â€‹</a></h1><p>Vala code is written in files with <em>.vala</em> extensions. Vala does not enforce as much structure as a language like Java - there are no concepts of packages or class files in the same way. Instead structure is defined by text inside each file, describing the logical location of the code with constructs such as namespaces. When you want to compile Vala code, you give the compiler a list of the files required, and Vala will work out how they fit together.</p><p>The upshot of all this is that you can put as many classes or functions into a file as you want, even combining parts of different namespaces in together. This is not necessarily a good idea. There are certain conventions you probably want to follow. A good example of how to structure a project in Vala is the Vala project itself.</p><p>All source files for the same package are supplied as command line parameters to the Vala compiler <code>valac</code>, along with compiler flags. This works similarly to how Java source code is compiled. For example:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> compiler.vala</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> libvala</span></span></code></pre></div><p>will produce a binary with the name <em>compiler</em> that links with the package <code>libvala</code>. In fact, this is how the <em>valac</em> compiler is produced!</p><p>If you want the binary to have a different name or if you have passed multiple source files to the compiler you can specify the binary name explicitly with the <code>-o</code> switch:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source1.vala</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> source2.vala</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> myprogram</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./myprogram</span></span></code></pre></div><p>If you give <em>valac</em> the <code>-C</code> switch, it won&#39;t compile your program into a binary file. Instead it will output the intermediate C code for each of your Vala source files into a corresponding C source file, in this case <em>source1.c</em> and <em>source2.c</em>. If you look at the content of these files you can see that programming a class in Vala is equivalent to the same task in C, but a whole lot more succinct. You will also notice that this class is registered dynamically in the running system. This is a good example of the power of the GNOME platform, but as I&#39;ve said before, you do not need to know much about this to use Vala.</p><p>If you want to have a C header file for your project you can use the <code>-H</code> switch:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.vala</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -C</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -H</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.h</span></span></code></pre></div>`,11)])])}const m=e(o,[["render",l]]);export{u as __pageData,m as default};
