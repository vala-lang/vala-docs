import{_ as s,c as e,o as i,ag as t}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"3.3. Destruction","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/03-00-object-oriented-programming/03-03-destruction.md","filePath":"tutorials/programming-language/main/03-00-object-oriented-programming/03-03-destruction.md","lastUpdated":1760471362000}'),n={name:"tutorials/programming-language/main/03-00-object-oriented-programming/03-03-destruction.md"};function r(o,a,l,p,h,d){return i(),e("div",null,[...a[0]||(a[0]=[t(`<h1 id="_3-3-destruction" tabindex="-1">3.3. Destruction <a class="header-anchor" href="#_3-3-destruction" aria-label="Permalink to &quot;3.3. Destruction&quot;">â€‹</a></h1><p>Although Vala manages the memory for you, you might need to add your own destructor if you choose to do manual memory management with pointers (more on that later) or if you have to release other resources. The syntax is the same as in C# and C++:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ~</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Demo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;in destructor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Since Vala&#39;s memory management is based on <em>reference counting</em> instead of <em>tracing garbage collection</em>, destructors are deterministic and can be used to implement the <a href="http://en.wikipedia.org/wiki/RAII" target="_blank" rel="noreferrer">RAII</a> pattern for resource management (closing streams, database connections, ...).</p>`,4)])])}const k=s(n,[["render",r]]);export{g as __pageData,k as default};
