import{_ as s,c as a,o as t,ag as e}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"3.11. Run-Time Type Information","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.md","filePath":"tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.md","lastUpdated":1759843583000}'),n={name:"tutorials/programming-language/main/03-00-object-oriented-programming/03-11-run-time-type-information.md"};function p(h,i,o,l,r,k){return t(),a("div",null,[...i[0]||(i[0]=[e(`<h1 id="_3-11-run-time-type-information" tabindex="-1">3.11. Run-Time Type Information <a class="header-anchor" href="#_3-11-run-time-type-information" aria-label="Permalink to &quot;3.11. Run-Time Type Information&quot;">â€‹</a></h1><p>Since Vala classes are registered at runtime and each instance carries its type information you can dynamically check the type of an object with the <code>is</code> operator:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b = object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeTypeName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>You can get the type information of <code>Object</code> instances with the <code>get_type()</code> method:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type = object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span></code></pre></div><p>With the <code>typeof()</code> operator you can get the type information of a type directly. From this type information you can later create new instances with <code>Object.new()</code>:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> type = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo = (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(type);</span></span></code></pre></div><p>Which constructor will be called? It&#39;s the <code>construct {}</code> block that will be described in the section about gobject-style construction.</p>`,8)])])}const g=s(n,[["render",p]]);export{c as __pageData,g as default};
