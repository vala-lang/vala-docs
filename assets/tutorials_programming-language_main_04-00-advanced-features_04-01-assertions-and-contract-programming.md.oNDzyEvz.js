import{_ as a,c as i,o as e,ag as n}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"4.1. Assertions and Contract Programming","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/04-00-advanced-features/04-01-assertions-and-contract-programming.md","filePath":"tutorials/programming-language/main/04-00-advanced-features/04-01-assertions-and-contract-programming.md","lastUpdated":1759713030000}'),t={name:"tutorials/programming-language/main/04-00-advanced-features/04-01-assertions-and-contract-programming.md"};function r(p,s,l,h,o,d){return e(),i("div",null,[...s[0]||(s[0]=[n(`<h1 id="_4-1-assertions-and-contract-programming" tabindex="-1">4.1. Assertions and Contract Programming <a class="header-anchor" href="#_4-1-assertions-and-contract-programming" aria-label="Permalink to &quot;4.1. Assertions and Contract Programming&quot;">â€‹</a></h1><p>With <em>assertions</em> a programmer can check assumptions at runtime. The syntax is <code>assert(condition)</code>. If an assertion fails the program will terminate with an appropriate error message. There are a few more assertion methods within the GLib standard namespace, e.g.:</p><p><code>assert_not_reached()</code></p><p><code>return_if_fail(bool expr)</code></p><p><code>return_if_reached()</code></p><p><code>warn_if_fail(bool expr)</code></p><p><code>warn_if_reached()</code></p><p>You might be tempted to use assertions in order to check method arguments for <code>null</code>. However, this is not necessary, since Vala does that implicitly for all parameters that are not marked with <code>?</code> as being <em>nullable</em>.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    /* Not necessary, Vala does that for you:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    return_if_fail(foo != null);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    return_if_fail(bar != null);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Vala supports basic <a href="http://en.wikipedia.org/wiki/Contract_programming" target="_blank" rel="noreferrer">contract programming</a> features. A method may have preconditions (<code>requires</code>) and postconditions (<code>ensures</code>) that must be fulfilled at the beginning or the end of a method respectively:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x &gt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; x &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        requires</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (d &gt;= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; d &lt;= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ensures</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (result &gt;= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp; result &lt;= </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d * x;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>result</code> is a special variable representing the return value.</p>`,12)])])}const g=a(t,[["render",r]]);export{c as __pageData,g as default};
