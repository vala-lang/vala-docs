import{_ as a,c as e,o as i,ag as t}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"4.8. Asynchronous Methods","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.md","filePath":"tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.md","lastUpdated":1759843583000}'),n={name:"tutorials/programming-language/main/04-00-advanced-features/04-08-asynchronous-methods.md"};function h(l,s,o,p,d,r){return i(),e("div",null,[...s[0]||(s[0]=[t(`<h1 id="_4-8-asynchronous-methods" tabindex="-1">4.8. Asynchronous Methods <a class="header-anchor" href="#_4-8-asynchronous-methods" aria-label="Permalink to &quot;4.8. Asynchronous Methods&quot;">â€‹</a></h1><p>Asynchronous methods are methods whose execution can be paused and resumed under the control of the programmer. They are often used in the main thread of an application where a method needs to wait for an external slow task to complete, but must not stop other processing from happening. (For example, one slow operation must not freeze the whole GUI). When the method has to wait, it gives control of the CPU back to its caller (i.e. it <em>yields</em>), but it arranges to be called back to resume execution when data becomes ready. External slow tasks that async methods might wait for include: waiting for data from a remote server, or waiting for calculations in another thread to complete, or waiting for data to load from a disk drive.</p><p>Asynchronous methods are normally used with a GLib main loop running, because idle callbacks are used to handle some of the internal callbacks. However under certain conditions <code>async</code> may be used without the GLib main loop, for example if the async methods always yield and <code>Idle.add()</code> is never used.</p><div class="info custom-block"><p class="custom-block-title">TODO</p><p>Add the exact conditions <code>async</code> may be used without the GLib main loop</p></div><p>Asynchronous methods are designed for interleaving the processing of many different long-lived operations within a single thread. They do not by themselves spread the load out over different threads. However, an async method may be used to control a background thread and to wait for it to complete, or to queue operations for a background thread to process.</p><p>Async methods in Vala use the GIO library to handle the callbacks, so must be built with the <code>--pkg=gio-2.0</code> option.</p><p>An asynchronous method is defined with the <code>async</code> keyword. For example:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display_jpeg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> fnam) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Load JPEG in a background thread and display it when loaded</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>or:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch_webpage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> url, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">throws</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> IOError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Fetch a webpage asynchronously and when ready return the</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // HTTP status code and put the page contents in &#39;text&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // [...]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    text = result;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The method may take arguments and return a value like any other method. It may use a <code>yield</code> statement at any time to give control of the CPU back to its caller.</p><p>An async method may be called with either of these two forms:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display_jpeg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">display_jpeg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;test.jpg&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (obj, res) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    display_jpeg.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>Both forms starts the async method running with the given arguments. The second form in addition registers an <code>AsyncReadyCallback</code> which is executed when the method finishes. The callback takes a source object, <code>obj</code>, and an instance of GAyncResult, <code>res</code>, as arguments. In the callback the <code>.end()</code> method should be called to receive the return value of the asynchronous method if it has one. If the async method can throw an exception, the <code>.end()</code> call is where the exception arrives and must be caught. If the method has <code>out</code> arguments, then these should be omitted from the <code>.begin()</code> call and added to the <code>.end()</code> call instead.</p><p>For example:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fetch_webpage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">begin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://www.example.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (obj, res) =&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status = fetch_webpage.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">end</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(res, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Result of call is in &#39;text&#39; and &#39;status&#39; ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IOError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Problem ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>When an asynchronous method starts running, it takes control of the CPU until it reaches its first <code>yield</code> statement, at which point it returns to the caller. When the method is resumed, it continues execution immediately after that <code>yield</code> statement. There are several common ways to use <code>yield</code>:</p><p>This form gives up control, but arranges for the GLib main loop to resume the method when there are no more events to process:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Idle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fetch_webpage.callback);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>This form gives up control, and stores the callback details for some other code to use to resume the method&#39;s execution:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SourceFunc</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> callback = fetch_webpage.callback;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* â€¦ store &#39;callback&#39; somewhere â€¦ */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Some code elsewhere must now call the stored <code>SourceFunc</code> in order for the method to be resumed. This could be done by scheduling the GLib main loop to run it:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Idle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">owned</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) callback);</span></span></code></pre></div><p>or alternatively a direct call may be made if the caller is running in the main thread:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">callback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>If the direct call above is used, then the resumed asynchronous method takes control of the CPU immediately and runs until its next <code>yield</code> before returning to the code that executed <code>callback()</code>. The <code>Idle.add()</code> method is useful if the callback must be made from a background thread, e.g. to resume the async method after completion of some background processing. (The <code>(owned)</code> cast is necessary to avoid a warning about copying delegates.)</p><p>The third common way of using <code>yield</code> is when calling another asynchronous method, for example:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> display_jpeg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(fnam);</span></span></code></pre></div><p>or</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> status = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">yield</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch_webpage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(url, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text);</span></span></code></pre></div><p>In both cases, the calling method gives up control of the CPU and does not resume until the called method completes. The <code>yield</code> statement automatically registers a callback with the called method to make sure that the caller resumes correctly. The automatic callback also collects the return value from the called method.</p><p>When this <code>yield</code> statement executes, control of the CPU first passes to the called method which runs until its first <code>yield</code> and then drops back to the calling method, which completes the <code>yield</code> statement itself, and then gives back control to its own caller.</p><h2 id="_4-8-1-examples" tabindex="-1">4.8.1. Examples <a class="header-anchor" href="#_4-8-1-examples" aria-label="Permalink to &quot;4.8.1. Examples&quot;">â€‹</a></h2><p>See <a href="https://wiki.gnome.org/Projects/Vala/AsyncSamples" target="_blank" rel="noreferrer">Async Method Samples</a> for examples of different ways that async may be used.</p>`,34)])])}const g=a(n,[["render",h]]);export{k as __pageData,g as default};
