import{_ as a,c as s,o as i,ag as t}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"4.9. Weak References","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/04-00-advanced-features/04-09-weak-references.md","filePath":"tutorials/programming-language/main/04-00-advanced-features/04-09-weak-references.md","lastUpdated":1759843583000}'),n={name:"tutorials/programming-language/main/04-00-advanced-features/04-09-weak-references.md"};function r(l,e,o,c,h,p){return i(),s("div",null,[...e[0]||(e[0]=[t(`<h1 id="_4-9-weak-references" tabindex="-1">4.9. Weak References <a class="header-anchor" href="#_4-9-weak-references" aria-label="Permalink to &quot;4.9. Weak References&quot;">â€‹</a></h1><p>Vala&#39;s memory management is based on automatic reference counting. Each time an object is assigned to a variable its internal reference count is increased by 1, each time a variable referencing an object goes out of scope its internal reference count is decreased by 1. If the reference count reaches 0 the object will be freed.</p><p>However, it is possible to form a reference cycle with your data structures. For example, with a tree data structure where a child node holds a reference to its parent and vice versa, or a doubly-linked list where each element holds a reference to its predecessor and the predecessor holds a reference to its successor.</p><p>In these cases objects could keep themselves alive simply by referencing to each other, even though they should be freed. To break such a reference cycle you can use the <code>weak</code> modifier for one of the references:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> weak</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prev;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Node</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> next;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This topic is explained in detail on this page: <a href="https://wiki.gnome.org/Projects/Vala/ReferenceHandling" target="_blank" rel="noreferrer">Memory Management</a>.</p>`,6)])])}const f=a(n,[["render",r]]);export{k as __pageData,f as default};
