import{_ as a,c as e,o as i,ag as n}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"4.12. Pointers","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.md","filePath":"tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.md","lastUpdated":1759534595000}'),t={name:"tutorials/programming-language/main/04-00-advanced-features/04-12-pointers.md"};function l(p,s,o,r,h,d){return i(),e("div",null,[...s[0]||(s[0]=[n(`<h1 id="_4-12-pointers" tabindex="-1">4.12. Pointers <a class="header-anchor" href="#_4-12-pointers" aria-label="Permalink to &quot;4.12. Pointers&quot;">â€‹</a></h1><p>Pointers are Vala&#39;s way of allowing manual memory management. Normally when you create an instance of a type you receive a reference to it, and Vala will take care of destroying the instance when there are no more references left to it. By requesting instead a pointer to an instance, you take responsibility for destroying the instance when it is no longer wanted, and therefore get greater control over how much memory is used.</p><p>This functionality is not necessarily needed most of the time, as modern computers are usually fast enough to handle reference counting and have enough memory that small inefficiencies are not important. The times when you might resort to manual memory management are:</p><ul><li>When you specifically want to optimise part of a program and <a href="./04-10-ownership.html#_4-10-1-unowned-references">unowned references</a> are insufficient.</li><li>When you are dealing with an external library that does not implement reference counting for memory management (probably meaning one not based on gobject.)</li></ul><p>In order to create an instance of a type, and receive a pointer to it:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* o = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>In order to access members of that instance:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o-&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method_1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o-&gt;data_1;</span></span></code></pre></div><p>In order to free the memory pointed to:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o;</span></span></code></pre></div><p>Vala also supports the <em>address-of</em> (<code>&amp;</code>) and <em>indirection</em> (<code>*</code>) operators known from C:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i = </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">42</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* i_ptr = &amp;i;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// address-of</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> j = *i_ptr;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// indirection</span></span></code></pre></div><p>The behavior is a bit different with reference types, you can omit the address-of and indirection operator on assignment:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">* f_ptr = f;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// address-of</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g = f_ptr;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// indirection</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">unowned</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f_weak = f;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// equivalent to the second line</span></span></code></pre></div><p>The usage of reference-type pointers is equivalent to the use of unowned references.</p>`,15)])])}const g=a(t,[["render",l]]);export{c as __pageData,g as default};
