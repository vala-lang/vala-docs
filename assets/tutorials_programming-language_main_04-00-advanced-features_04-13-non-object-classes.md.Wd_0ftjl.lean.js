import{_ as t,c as n,o,j as e,a}from"./chunks/framework.B-XtCDNB.js";const h=JSON.parse('{"title":"4.13. Non-Object classes","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/04-00-advanced-features/04-13-non-object-classes.md","filePath":"tutorials/programming-language/main/04-00-advanced-features/04-13-non-object-classes.md","lastUpdated":1759713030000}'),l={name:"tutorials/programming-language/main/04-00-advanced-features/04-13-non-object-classes.md"};function i(r,s,c,d,m,u){return o(),n("div",null,[...s[0]||(s[0]=[e("h1",{id:"_4-13-non-object-classes",tabindex:"-1"},[a("4.13. Non-Object classes "),e("a",{class:"header-anchor",href:"#_4-13-non-object-classes","aria-label":'Permalink to "4.13. Non-Object classes"'},"â€‹")],-1),e("p",null,[a("Classes defined as not being descended from "),e("em",null,"GLib.Object"),a(" are treated as a special case. They are derived directly from GLib's type system and therefore much lighter in weight. In a more recent Vala compiler, one can also implement interfaces, signals and properties with these classes.")],-1),e("p",null,[a("One obvious case of using these non-"),e("em",null,"Object"),a(" classes stays in the GLib bindings. Because GLib is at a lower level than GObject, most classes defined in the binding are of this kind. Also, as mentioned before, the lighter weight of non-object classes make them useful in many practical situations (e.g. the Vala compiler itself). However the detailed usage of non-"),e("em",null,"Object"),a(" classes are outside the scope of this tutorial. Be aware that these classes are fundamentally different from structs.")],-1)])])}const p=t(l,[["render",i]]);export{h as __pageData,p as default};
