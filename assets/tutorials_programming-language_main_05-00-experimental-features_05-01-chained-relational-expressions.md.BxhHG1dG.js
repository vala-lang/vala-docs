import{_ as a,c as i,o as n,ag as e}from"./chunks/framework.B-XtCDNB.js";const E=JSON.parse('{"title":"5.1. Chained Relational Expressions","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/05-00-experimental-features/05-01-chained-relational-expressions.md","filePath":"tutorials/programming-language/main/05-00-experimental-features/05-01-chained-relational-expressions.md","lastUpdated":1761243551000}'),l={name:"tutorials/programming-language/main/05-00-experimental-features/05-01-chained-relational-expressions.md"};function t(p,s,h,r,k,d){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="_5-1-chained-relational-expressions" tabindex="-1">5.1. Chained Relational Expressions <a class="header-anchor" href="#_5-1-chained-relational-expressions" aria-label="Permalink to &quot;5.1. Chained Relational Expressions&quot;">â€‹</a></h1><div class="danger custom-block"><p class="custom-block-title">Danger</p><p>Experimental Feature</p></div><p>This feature allows you to write complex relational expressions like</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt; a &amp;&amp; a &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt; a &amp;&amp; a &lt; b &amp;&amp; b &lt; c &amp;&amp; c &lt; d &amp;&amp; d &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>in a more natural way:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt; a &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt; a &lt; b &lt; c &lt; d &lt; </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // do something</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>`,6)])])}const g=a(l,[["render",t]]);export{E as __pageData,g as default};
