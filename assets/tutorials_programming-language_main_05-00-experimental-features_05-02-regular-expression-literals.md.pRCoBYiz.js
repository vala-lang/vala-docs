import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const d=JSON.parse('{"title":"5.2. Regular Expression Literals","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.md","filePath":"tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.md","lastUpdated":1759843583000}'),l={name:"tutorials/programming-language/main/05-00-experimental-features/05-02-regular-expression-literals.md"};function n(h,s,p,r,k,o){return e(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="_5-2-regular-expression-literals" tabindex="-1">5.2. Regular Expression Literals <a class="header-anchor" href="#_5-2-regular-expression-literals" aria-label="Permalink to &quot;5.2. Regular Expression Literals&quot;">â€‹</a></h1><div class="danger custom-block"><p class="custom-block-title">Danger</p><p>Experimental Feature</p></div><p><a href="http://www.regular-expressions.info/" target="_blank" rel="noreferrer">Regular expressions</a> are a powerful technique for pattern matching in strings. Vala has experimental support for regular expression literals (<code>/regex/</code>). Example:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;tux@kernel.org&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (/^[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_%+-]+@[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Z0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.-]+\\.[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">A</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}$/i.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">match</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(email)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Valid email address</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The trailing <em>i</em> makes the expression case insensitive. You can store a regular expression in a variable of type <em>Regex</em>:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Regex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> regex = </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/foo/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>A example of regular expression replacement:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r = </span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">/(foo|bar|cow)/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o = r.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">replace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;this foo is great&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;thing&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%s</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, o);</span></span></code></pre></div><p>The following trailing characters can be used:</p><ul><li><em>i</em>, letters in the pattern match both upper- and lowercase letters</li><li><em>m</em>, the &quot;start of line&quot; and &quot;end of line&quot; constructs match immediately following or immediately before any newline in the string, respectively, as well as at the very start and end.</li><li><em>s</em>, a dot metacharater <em>.</em> in the pattern matches all characters, including newlines. Without it, newlines are excluded.</li><li><em>x</em>, whitespace data characters in the pattern are totally ignored except when escaped or inside a character class.</li><li><em>o</em>, request JIT compilation of a regular expression. It allows to execute this regex much faster at the cost of extra time taken to compile it. This option is most benificial, when the same compiled pattern is used for matching several times.</li></ul>`,10)])])}const g=i(l,[["render",n]]);export{d as __pageData,g as default};
