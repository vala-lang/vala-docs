import{_ as a,c as i,o as s,ag as t}from"./chunks/framework.B-XtCDNB.js";const u=JSON.parse('{"title":"5.3. Strict Non-Null Mode","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.md","filePath":"tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.md","lastUpdated":1760471362000}'),n={name:"tutorials/programming-language/main/05-00-experimental-features/05-03-strict-non-null-mode.md"};function l(o,e,r,p,d,c){return s(),i("div",null,[...e[0]||(e[0]=[t(`<h1 id="_5-3-strict-non-null-mode" tabindex="-1">5.3. Strict Non-Null Mode <a class="header-anchor" href="#_5-3-strict-non-null-mode" aria-label="Permalink to &quot;5.3. Strict Non-Null Mode&quot;">â€‹</a></h1><div class="danger custom-block"><p class="custom-block-title">Danger</p><p>Experimental Feature</p></div><p>If you compile your code with <code>--enable-experimental-non-null</code> the Vala compiler will run in strict non-null type checking mode and consider <em>every</em> type to be not nullable by default unless it is explicitly declared nullable by marking it with a question mark:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o1 = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// not nullable</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? o2 = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// nullable</span></span></code></pre></div><p>The compiler will perform a static compile-time analysis to ensure that no nullable reference is assigned to a non-nullable reference, e.g. this won&#39;t be possible:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o1 = o2;</span></span></code></pre></div><p><em>o2</em> could be <em>null</em> and <em>o1</em> was declared non-nullable, so this assignment is forbidden. However, you can override this behaviour with an explicit non-null cast if you&#39;re sure that <em>o2</em> is not <em>null</em>:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">o1 = (!) o2;</span></span></code></pre></div><p>The strict non-null mode helps in avoiding unwanted <em>null</em> dereferencing errors. This feature would come to full potential if the nullability of all return types in bindings was marked correctly, which is currently not always the case.</p>`,9)])])}const m=a(n,[["render",l]]);export{u as __pageData,m as default};
