import{_ as a,c as i,o as s,ag as t}from"./chunks/framework.B-XtCDNB.js";const c=JSON.parse('{"title":"6.1. Using Libraries","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/06-00-libraries/06-01-using-libraries.md","filePath":"tutorials/programming-language/main/06-00-libraries/06-01-using-libraries.md","lastUpdated":1761243551000}'),l={name:"tutorials/programming-language/main/06-00-libraries/06-01-using-libraries.md"};function n(r,e,o,p,h,g){return s(),i("div",null,[...e[0]||(e[0]=[t('<h1 id="_6-1-using-libraries" tabindex="-1">6.1. Using Libraries <a class="header-anchor" href="#_6-1-using-libraries" aria-label="Permalink to &quot;6.1. Using Libraries&quot;">â€‹</a></h1><p>Using a library in Vala is largely automated if you use the <em>valac</em> compiler. The Vala specific library files make up what is known as a package. You tell the compiler that a package is needed by your program as follows:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gee-1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.vala</span></span></code></pre></div><p>This command means your program can use any of the definitions in the <em>gee-1.0.vapi</em> file, and also any in any of the packages that <em>gee-1.0</em> depends on. These dependencies would be listed in <em>gee-1.0.deps</em> if there were any. In this example <em>valac</em> is set to build all the way to binary, and will therefore incorporate information from <em>pkg-config</em> to link the correct libraries. This is why the <em>pkg-config</em> names are also used for Vala package names.</p><p>Packages are generally used with namespaces, but they are not technically related. This means that even though your application is built with reference to the package, you must still include the required <code>using</code> statements in each file as appropriate, or else use the fully qualified names of all symbols.</p><p>It is also possible to treat a local library (one that is not installed) as a package. For comparison, Vala itself uses an internal version of Gee. When <em>valac</em> is built it creates a VAPI file of this internal library and uses it roughly as follows:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --vapidir</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ../gee</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gee</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ...</span></span></code></pre></div><p>For details on how to generate this library, see the next section or the example.</p>',8)])])}const m=a(l,[["render",n]]);export{c as __pageData,m as default};
