import{_ as e,c as a,o as t,ag as n}from"./chunks/framework.B-XtCDNB.js";const m=JSON.parse('{"title":"6.3. Binding Libraries with VAPI Files","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/06-00-libraries/06-03-binding-libraries-with-vapi-files.md","filePath":"tutorials/programming-language/main/06-00-libraries/06-03-binding-libraries-with-vapi-files.md","lastUpdated":1759534595000}'),r={name:"tutorials/programming-language/main/06-00-libraries/06-03-binding-libraries-with-vapi-files.md"};function l(s,i,o,d,c,g){return t(),a("div",null,[...i[0]||(i[0]=[n('<h1 id="_6-3-binding-libraries-with-vapi-files" tabindex="-1">6.3. Binding Libraries with VAPI Files <a class="header-anchor" href="#_6-3-binding-libraries-with-vapi-files" aria-label="Permalink to &quot;6.3. Binding Libraries with VAPI Files&quot;">â€‹</a></h1><p>VAPI files are descriptions of the public interface of external Vala libraries. When a library is written in Vala, this file is created by the Vala compiler, and basically an amalgamation of all public definitions from all Vala source files. For a library written in C, the VAPI file gets more complicated, particular if the naming conventions of the library do not follow the GLib convention. The VAPI file will in this case contain many annotations describing how the standardised Vala interface mangles onto the C version.</p><p>This process of creating this generally amounts to three steps,</p><ul><li>Running <em>vala-gen-introspect</em> to extract metadata from the C library.</li><li>Adding extra metadata to standardise the interface or make various other changes.</li><li>Generating a VAPI file from the above sources using <em>vapigen</em>.</li></ul><p>Specific instructions on how to generate bindings are in the <a href="./../../../../developer-guides/bindings.html">Vala Bindings Tutorial</a>.</p>',5)])])}const p=e(r,[["render",l]]);export{m as __pageData,p as default};
