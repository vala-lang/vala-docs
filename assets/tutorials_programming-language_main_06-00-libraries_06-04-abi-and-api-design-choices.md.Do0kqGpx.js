import{_ as a,c as s,o as e,ag as t}from"./chunks/framework.B-XtCDNB.js";const k=JSON.parse('{"title":"6.4. ABI and API Design Choices","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.md","filePath":"tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.md","lastUpdated":1759843583000}'),n={name:"tutorials/programming-language/main/06-00-libraries/06-04-abi-and-api-design-choices.md"};function l(r,i,h,o,p,d){return e(),s("div",null,[...i[0]||(i[0]=[t(`<h1 id="_6-4-abi-and-api-design-choices" tabindex="-1">6.4. ABI and API Design Choices <a class="header-anchor" href="#_6-4-abi-and-api-design-choices" aria-label="Permalink to &quot;6.4. ABI and API Design Choices&quot;">​</a></h1><h2 id="_6-4-1-abi" tabindex="-1">6.4.1. ABI <a class="header-anchor" href="#_6-4-1-abi" aria-label="Permalink to &quot;6.4.1. ABI&quot;">​</a></h2><p><code>abit-compliance-checker</code> is a cross-platform tool for checking the stability of an ABI. Supported platforms are GNU/Linux, FreeBSD, Mac OS X and MS Windows. See <a href="https://lvc.github.io/abi-compliance-checker/" target="_blank" rel="noreferrer">ABI Compliance Checker</a> for more details.</p><p>The tool uses debug symbols to generate an ABI profile of a shared library:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abi-dumper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_library.so</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ABI-0.dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span></code></pre></div><p>This is then repeated for the new version of the library:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abi-dumper</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_library.so</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ABI-1.dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -lver</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span></span></code></pre></div><p>A report is then generated with:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abi-compliance-checker</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -l</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> my_library</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -old</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ABI-0.dump</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -new</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ABI-1.dump</span></span></code></pre></div><p>The report is an HTML file showing changes in the ABI. An <a href="https://abi-laboratory.pro/?view=timeline&amp;l=vala" target="_blank" rel="noreferrer">example report for Vala</a> is available online.</p><h2 id="_6-4-2-api-design" tabindex="-1">6.4.2. API Design <a class="header-anchor" href="#_6-4-2-api-design" aria-label="Permalink to &quot;6.4.2. API Design&quot;">​</a></h2><h3 id="_6-4-2-1-avoid-custom-constructors" tabindex="-1">6.4.2.1. Avoid Custom Constructors <a class="header-anchor" href="#_6-4-2-1-avoid-custom-constructors" aria-label="Permalink to &quot;6.4.2.1. Avoid Custom Constructors&quot;">​</a></h3><p>The following example contains a custom constructors:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value;   </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        value = contents;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>This will be translated to C as the function name <code>my_class_new</code> and can be called with a string argument to create the object.</p><p>The problem is GObject has an alternative way of creating an object. In Vala this is of the form:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>The Vala <code>Object.new</code> method is bound to GObject <a href="https://docs.gtk.org/gobject/ctor.Object.new.html" target="_blank" rel="noreferrer">g_object_new</a> function in C and is often used to instantiate GObjects. This can be from C, but also from languages using GObject introspection bindings. The problem is the construction defined Vala is not called.</p><p>Vala does have a way to run a function at instantiation time that is the use of the construct {} in the class. See <a href="./../../../programming-language/main/03-00-object-oriented-programming/03-14-gobject-style-construction.html">GObject Style Construction page</a> in the <a href="./../../../programming-language/main.html">Vala Main Tutorial</a> in the Vala tutorial.</p><h3 id="_6-4-2-2-avoid-using-varargs" tabindex="-1">6.4.2.2. Avoid Using varargs <a class="header-anchor" href="#_6-4-2-2-avoid-using-varargs" aria-label="Permalink to &quot;6.4.2.2. Avoid Using varargs&quot;">​</a></h3><p>A function with a variable number of arguments is not introspectable. Although the GObject Introspection Repository will contain a method or function that can be called with a variable number of arguments, the method or function will be marked as <code>introspectable=&quot;0&quot;</code>. This causes binding generators to ignore the method or function. In Vala this can be overridden using <code>skip = false</code> in the metadata, but such techniques are not available in all bindings.</p><h3 id="_6-4-2-3-avoid-using-generics" tabindex="-1">6.4.2.3. Avoid Using Generics <a class="header-anchor" href="#_6-4-2-3-avoid-using-generics" aria-label="Permalink to &quot;6.4.2.3. Avoid Using Generics&quot;">​</a></h3><p>Since GObject Introspection does not handle generics, using them in APIs is harmful, since GI will generate 3 new parameters in the constructors of each generic class: one for the GType function, one for the duplication function and another for the destruction. These parameters are quite complicated to handle in languages like Python or Javascript.</p><p>In addition to this, the properties that expose the generic type parameter will be exposed as several objects of the <code>gpointer</code> type, which makes it even more complicated. Even generic methods like Gee&#39;s <code>add ()</code> will expect a <code>gpointer</code> in GI, so doing something like this in Python will result in an error, contrary to what you expect.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> get_a_list_of_strings ()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.add (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hi&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h2 id="_6-4-3-further-reading" tabindex="-1">6.4.3. Further Reading <a class="header-anchor" href="#_6-4-3-further-reading" aria-label="Permalink to &quot;6.4.3. Further Reading&quot;">​</a></h2><ul><li><a href="http://essentials.xebia.com/apis-are-forever/" target="_blank" rel="noreferrer">APIs, like diamonds, are forever</a> - some criteria for good API design</li><li><a href="https://blog.piechotka.com.pl/2013/07/30/libraries-in-vala-abi-compatibility-part-i/" target="_blank" rel="noreferrer">Libraries in Vala - ABI compatibility - part I</a></li><li><a href="https://blog.piechotka.com.pl/2013/12/20/libraries-in-vala-abi-compatibility-part-ii/" target="_blank" rel="noreferrer">Libraries in Vala - ABI compatibility - part II</a></li><li><a href="https://gi.readthedocs.io/en/latest/writingbindableapis.html" target="_blank" rel="noreferrer">Writing Bindable APIs (GObject Intropsection)</a></li><li><a href="https://storageapis.wordpress.com/2014/07/25/minimalistic-example-of-the-glibs-gboxedtype-usage/" target="_blank" rel="noreferrer">Minimalistic example of the GLib&#39;s GBoxedType usage</a> - explanation of basic types when used with GObject Introspection and how to bind structs</li></ul>`,27)])])}const g=a(n,[["render",l]]);export{k as __pageData,g as default};
