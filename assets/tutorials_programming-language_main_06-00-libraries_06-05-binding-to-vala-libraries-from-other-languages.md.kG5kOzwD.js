import{_ as a,c as t,o as r,ag as o}from"./chunks/framework.B-XtCDNB.js";const d=JSON.parse('{"title":"6.5. Binding to Vala Libraries from Other Languages","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/06-00-libraries/06-05-binding-to-vala-libraries-from-other-languages.md","filePath":"tutorials/programming-language/main/06-00-libraries/06-05-binding-to-vala-libraries-from-other-languages.md","lastUpdated":1759843583000}'),i={name:"tutorials/programming-language/main/06-00-libraries/06-05-binding-to-vala-libraries-from-other-languages.md"};function n(l,e,s,b,g,c){return r(),t("div",null,[...e[0]||(e[0]=[o('<h1 id="_6-5-binding-to-vala-libraries-from-other-languages" tabindex="-1">6.5. Binding to Vala Libraries from Other Languages <a class="header-anchor" href="#_6-5-binding-to-vala-libraries-from-other-languages" aria-label="Permalink to &quot;6.5. Binding to Vala Libraries from Other Languages&quot;">​</a></h1><p>Vala produces C code and also produces C headers. Binding from C is relatively easy, although the library may make use of a lot of GObject boiler plate code.</p><p>For Vala based projects, using either the Vala or Genie syntax, a VAPI can be produced that makes bindings easy.</p><p>The Vala compiler can also produce a GObject Introspection Repository (GIR) file. This makes bindings from languages that support GObject Introspection very easy. Often the binding is at runtime so a typelib file also needs to be produced and libgirepository and libffi are used at runtime for the binding.</p><h2 id="_6-5-1-haskell" tabindex="-1">6.5.1. Haskell <a class="header-anchor" href="#_6-5-1-haskell" aria-label="Permalink to &quot;6.5.1. Haskell&quot;">​</a></h2><p>As of January 2017 the Haskell generator from GObject introspection repositories, haskell-gi, is described as complete. The Haskell wiki page on GObject Introspection advises &quot;The Haskell code generator at haskell-gi is now essentially complete: all the information exposed in the bindings should now be available from the autogenerated bindings. This includes: ordinary functions, signals, virtual functions, structure fields, object properties, etc.&quot;</p><p><a href="https://github.com/haskell-gi/haskell-gi" target="_blank" rel="noreferrer">haskell-gi</a> - Generate Haskell bindings for GObject-Introspection capable libraries</p><h2 id="_6-5-2-javascript" tabindex="-1">6.5.2. JavaScript <a class="header-anchor" href="#_6-5-2-javascript" aria-label="Permalink to &quot;6.5.2. JavaScript&quot;">​</a></h2><p><a href="https://github.com/romgrk/node-gtk" target="_blank" rel="noreferrer">node-gtk</a> - &quot;uses the GObject Introspection library (as PyGObject, for example), so any gobject-introspectable library is supported&quot;</p><p><a href="https://github.com/creationix/node-gir" target="_blank" rel="noreferrer">node-gir</a> - &quot;Node-gir is Node.js bindings to GObject Introspection making it possible to make automatic and dynamic calls to any library that has GI annotations installed...With it you can also write the performance-intensive parts of your applications in Vala and call them from Node.js and other languages.&quot;</p><h2 id="_6-5-3-lua" tabindex="-1">6.5.3. Lua <a class="header-anchor" href="#_6-5-3-lua" aria-label="Permalink to &quot;6.5.3. Lua&quot;">​</a></h2><p><a href="https://github.com/pavouk/lgi" target="_blank" rel="noreferrer">LGI</a> provides runtime bindings for Lua 5.1+ and LuaJIT2. It uses libgirepository to read typelib files.</p><p>There are alternative binding generators: lgob and LuiGI. <a href="https://bitbucket.org/lucashnegri/lgob/src/master/" target="_blank" rel="noreferrer">lgob</a> parses GIR files to generate Lua modules. LuiGI was an experimental dynamic binding generator. LGI should be used instead of LuiGI.</p><ul><li><a href="https://github.com/pavouk/lgi" target="_blank" rel="noreferrer">LGI</a> - &quot;LGI is gobject-introspection based dynamic Lua binding to GObject based libraries...LGI is tested and compatible with standard Lua 5.1, Lua 5.2, Lua 5.3 and LuaJIT2.&quot;</li><li><a href="https://bitbucket.org/lucashnegri/lgob/src/master/" target="_blank" rel="noreferrer">lgob</a> - &quot;lgob provides bindings of GObject-based libraries (like GTK+ and WebKitGTK+), for Lua 5.1 / 5.2 / LuaJIT. It consists of a compiler that parses GObject-Instrospection gir files and generates Lua modules. lgob ships with bindings for GTK+, pango, cairo, vte, WebKitGtk, GtkTextView, and others&quot;</li><li><a href="https://perezdecastro.org/2010/some-thoughts-and-code-around-gobject-introspection.html" target="_blank" rel="noreferrer">Some thoughts (and code) around GObject-Introspection</a>- blog post from 2010 about the origins of LuiGI, &quot;the kind people there made me note about LGI, which is also a dynamic GI binding for Lua...but looking at its code I can tell that it is more complete than my own, so I will be probably contributing to it instead of duplicating efforts&quot;</li></ul><h2 id="_6-5-4-perl" tabindex="-1">6.5.4. Perl <a class="header-anchor" href="#_6-5-4-perl" aria-label="Permalink to &quot;6.5.4. Perl&quot;">​</a></h2><p><a href="https://git.gnome.org/browse/perl-Glib-Object-Introspection/" target="_blank" rel="noreferrer">perl-Glib-Object-Introspection</a> creates Perl bindings at runtime from a typelib file.</p><ul><li><a href="http://search.cpan.org/~xaoc/Glib-Object-Introspection/lib/Glib/Object/Introspection.pm" target="_blank" rel="noreferrer">Glib::Object::Introspection</a> - CPAN module of <a href="https://git.gnome.org/browse/perl-Glib-Object-Introspection/" target="_blank" rel="noreferrer">perl-Glib-Object-Introspection</a>. The CPAN page includes examples.</li></ul><h2 id="_6-5-5-python" tabindex="-1">6.5.5. Python <a class="header-anchor" href="#_6-5-5-python" aria-label="Permalink to &quot;6.5.5. Python&quot;">​</a></h2><p><a href="https://pygobject.gnome.org/" target="_blank" rel="noreferrer">PyGObject</a> is a Python package providing bindings using GObject introspection.</p><ul><li><a href="https://pygobject.gnome.org/" target="_blank" rel="noreferrer">PyGObject Documentation</a> - &quot;PyGObject provides full support of GObject Introspection and all of its features (callbacks, GVariant support, closures, sub-classing, etc.)&quot;</li><li><a href="https://gitlab.gnome.org/GNOME/pygobject/" target="_blank" rel="noreferrer">PyGObject source repository at GNOME GitLab</a></li><li><a href="https://github.com/pygobject/pgi-docgen" target="_blank" rel="noreferrer">pgi-docgen</a> - GitHub repository of the API Documentation Generator for PyGObject</li><li><a href="https://lazka.github.io/pgi-docs/" target="_blank" rel="noreferrer">PyGObject API Reference</a> - pre-built API documentation for numerous libraries available through PyGObject</li></ul><h2 id="_6-5-6-rust" tabindex="-1">6.5.6. Rust <a class="header-anchor" href="#_6-5-6-rust" aria-label="Permalink to &quot;6.5.6. Rust&quot;">​</a></h2><p>The <a href="https://gtk-rs.org/" target="_blank" rel="noreferrer">gtk-rs</a> project has developed the <code>gir</code> tool to generate Rust bindings from a GIR file.</p><ul><li><a href="https://github.com/gtk-rs/gir" target="_blank" rel="noreferrer">gtk-rs/gir</a> - GitHub repository for the <code>gir</code> tool. A GIR file is needed and an additional TOML file is used to pass binding metadata to the tool</li></ul>',23)])])}const h=a(i,[["render",n]]);export{d as __pageData,h as default};
