import{_ as e,c as i,o as s,ag as t}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"7.1. valac","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/07-00-tools/07-01-valac.md","filePath":"tutorials/programming-language/main/07-00-tools/07-01-valac.md","lastUpdated":1759534595000}'),l={name:"tutorials/programming-language/main/07-00-tools/07-01-valac.md"};function n(o,a,h,r,p,c){return s(),i("div",null,[...a[0]||(a[0]=[t('<h1 id="_7-1-valac" tabindex="-1">7.1. valac <a class="header-anchor" href="#_7-1-valac" aria-label="Permalink to &quot;7.1. valac&quot;">â€‹</a></h1><p><code>valac</code> is the Vala compiler. Its primary function is to transform Vala code into compilable C code.</p><p>You can generally ignore warnings from the C compiler when using Vala and just need to notice the warnings from <code>valac</code> Vala has better information than the C compiler, so it knows certain things are valid when the C compiler has no way of knowing that.</p><p>Unfortunately we can&#39;t just add casts everywhere since there are situations where we can&#39;t generate a valid cast (and, what&#39;s more, no way to know what those situations are).</p><p>For example, compiling the <a href="./../01-00-first-program.html">Hello World program</a> will give us some warnings because <code>valac</code> by default generates code which is compatible with older versions of the <code>GLib</code>.Some methods may have been deprecated in your new version of GLib so that C language compiler will warn you.</p><p>Imagine a machine with older glib version want to run your vala program!</p><p>valac could generate C code with target GLib version:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --target-glib</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> auto</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.vala</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # It will use the latest version of GLib which may not be compatible</span></span></code></pre></div><p>The recommended approach is to just disable those warnings by passing options to the C compiler:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -X</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -w</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.vala</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # Generated code is compatible, -X will pass -w to C compiler to disable all warnings.</span></span></code></pre></div><p>You could set an alias in your bash/zsh/fish shell.</p><p>valac can also automate the entire build and link project in simple cases:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -o</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> appname</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --pkg</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> gee-1.0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file_name_1.vala</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> file_name_2.vala</span></span></code></pre></div><p>The <code>-o</code> switch requests that an object file is created, rather than just outputting C source files. The <code>--pkg</code> option says that this build needs information from the <em>gee-1.0</em> package. You do not need to specify details about what libraries to link in, the package has this information internally. Finally, a list of source files is given. If you need a more complicated build process, use the <code>-C</code> switch to generate C files instead of a binary, and continue the process manually, or through a script.</p>',14)])])}const k=e(l,[["render",n]]);export{g as __pageData,k as default};
