import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.B-XtCDNB.js";const o=JSON.parse('{"title":"8.1. Debugging","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/08-00-techniques/08-01-debugging.md","filePath":"tutorials/programming-language/main/08-00-techniques/08-01-debugging.md","lastUpdated":1759534595000}'),l={name:"tutorials/programming-language/main/08-00-techniques/08-01-debugging.md"};function t(h,s,p,k,d,g){return n(),a("div",null,[...s[0]||(s[0]=[e(`<h1 id="_8-1-debugging" tabindex="-1">8.1. Debugging <a class="header-anchor" href="#_8-1-debugging" aria-label="Permalink to &quot;8.1. Debugging&quot;">â€‹</a></h1><p>For demonstration purposes we will create a buggy program by intentionally dereferencing a <code>null</code> reference, which will result in a segmentation fault:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> field;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">? foo = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;%d</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, foo.field);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug-demo.vala</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./debug-demo</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Segmentation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fault</span></span></code></pre></div><p>So how do we debug this program? The <code>-g</code> command line option tells the Vala compiler to include Vala source code line information in the compiled binary, <code>--save-temps</code> keeps the temporary C source files:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">valac</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-temps</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug-demo.vala</span></span></code></pre></div><p>Vala programs can be debugged with the GNU Debugger <code>gdb</code> or one of its graphical front-ends, e.g. <a href="https://www.gdbgui.com/" target="_blank" rel="noreferrer">gdbgui</a>.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nemiver</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug-demo</span></span></code></pre></div><p>A sample <code>gdb</code> session:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> debug-demo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">run</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Starting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> program:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /home/valacoder/debug-demo</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Program</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> received</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> signal</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> SIGSEGV,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Segmentation</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> fault.</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">0x0804881f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> _main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () at debug-demo.vala:7</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">7</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">           stdout.printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&quot;%d\\n&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> foo.field</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gdb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,10)])])}const c=i(l,[["render",t]]);export{o as __pageData,c as default};
