import{_ as a,c as s,o as t,ag as e}from"./chunks/framework.B-XtCDNB.js";const g=JSON.parse('{"title":"8.2. Using GLib","description":"","frontmatter":{},"headers":[],"relativePath":"tutorials/programming-language/main/08-00-techniques/08-02-using-glib.md","filePath":"tutorials/programming-language/main/08-00-techniques/08-02-using-glib.md","lastUpdated":1759713030000}'),n={name:"tutorials/programming-language/main/08-00-techniques/08-02-using-glib.md"};function l(h,i,p,o,r,d){return t(),s("div",null,[...i[0]||(i[0]=[e(`<h1 id="_8-2-using-glib" tabindex="-1">8.2. Using GLib <a class="header-anchor" href="#_8-2-using-glib" aria-label="Permalink to &quot;8.2. Using GLib&quot;">​</a></h1><p>GLib includes a large set of utilities, including wrappers for most of the standard libc functions and more. These tools are available on all Vala platforms, even those which are not POSIX compliant. For a complete description of all that GLib provides, see the <a href="https://docs.gtk.org/glib/" target="_blank" rel="noreferrer">GLib Reference Manual</a>. That reference is related to the C API for GLib, but it is mainly very simple to work out how to translate into Vala.</p><p>The GLib functions are available in Vala through the following naming convention:</p><table tabindex="0"><thead><tr><th>Language</th><th>Code</th></tr></thead><tbody><tr><td>C</td><td><code>g_topic_foobar()</code></td></tr><tr><td>Vala</td><td><code>GLib.Topic.foobar()</code></td></tr></tbody></table><p><strong>Example:</strong></p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_basename</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p>The GLib types can be used similarly:</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Instantiate with: */</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo = </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GLib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* Call an object member with: */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span></code></pre></div><p>The APIs are not identical between C and Vala, but these naming rules should mean you can find the functions you need in the GLib VAPI files shipped with Vala, and from there find the parameters. This will hopefully suffice until more Vala documentation can be generated.</p><h2 id="_8-2-1-file-handling" tabindex="-1">8.2.1. File Handling <a class="header-anchor" href="#_8-2-1-file-handling" aria-label="Permalink to &quot;8.2.1. File Handling&quot;">​</a></h2><p>For flexible file I/O and file handling see <a href="https://wiki.gnome.org/Projects/Vala/GIOSamples" target="_blank" rel="noreferrer">GIO Samples</a>.</p><p>You can also use !FileUtils.get_contents to load a file into a string.</p><div class="language-vala vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vala</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FileUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get_contents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;file.vala&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content);</span></span></code></pre></div>`,13)])])}const c=a(n,[["render",l]]);export{g as __pageData,c as default};
